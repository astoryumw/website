{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\n/* I should write a delete last button */\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"textInput\", function () {\n      clearInterval(_this.timer);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (_this.state.milliSecondsElapsed === 0) {\n          _this.startBtn.click();\n        } else if (_this.state.timerInProgress === false) {\n          _this.startBtn.click();\n        } else {\n          _this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        _this.clearBtn.click();\n      }\n\n      if (e.keyCode === 100) {\n        _this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      if (_this.state.timerInProgress === true) return;\n\n      _this.setState({\n        milliSecondsElapsed: 0\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          milliSecondsElapsed: _this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, function () {\n          _this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function () {\n      if (_this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        _this.setState({\n          average: (_this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        // adds value to the total\n        total: _this.state.total + _this.state.milliSecondsElapsed\n      });\n\n      _this.setState({\n        last: _this.state.milliSecondsElapsed\n      });\n\n      if (_this.state.high < _this.state.milliSecondsElapsed) {\n        // finds slowest time\n        _this.setState({\n          high: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low === 0) {\n        // finds fastest time\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low > _this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      _this.setState( // adding the value to the array\n      function (previousState) {\n        return {\n          timerInProgress: false,\n          // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n          myArray: [_this.state.milliSecondsElapsed / 100].concat(_toConsumableArray(previousState.myArray))\n        };\n      }, function () {\n        clearInterval(_this.timer);\n\n        _this.startBtn.focus();\n      });\n\n      if (_this.state.count === 1) {\n        _this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (_this.state.total / _this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        count: 1\n      }); // it makes the first value equal to the average, then averages the second value on the third run\n      // so on, so forth\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clear\", function () {\n      _this.setState({\n        average: 0\n      });\n\n      _this.setState({\n        high: 0\n      });\n\n      _this.setState({\n        low: 0\n      });\n\n      _this.setState({\n        total: 0\n      });\n\n      _this.setState({\n        myArray: []\n      });\n\n      _this.setState({\n        range: 0\n      });\n\n      _this.startBtn.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delete\", function () {\n      // should delete the last item\n      var subtract = _this.state.last;\n      var length = _this.state.myArray.length;\n      length = length * 100;\n\n      _this.setState({\n        total: _this.state.total - subtract // correctly fings new average\n\n      });\n\n      _this.setState({\n        data: _this.state.myArray\n      });\n\n      _this.setState({\n        myArray: _this.state.myArray.splice(1)\n      });\n\n      if (_this.state.milliSecondsElapsed === _this.state.low) {\n        // then need to find new low\n        _this.setState({\n          low: 0\n        });\n\n        if (length > 1) {\n          _this.setState({\n            low: _this.state.data[1]\n          });\n        }\n      } // this.setState({\n      //   lastLow: this.state.low/100\n      // })\n      // subtract = subtract / 100;\n      // var value = 0;\n      // if (length>1) {\n      //   value = this.state.data[1];\n      // }\n      // // need to find new low if these are equal\n      // if (this.state.lastLow===subtract) {\n      //   for (var i=1; i<=length; i++) {\n      //     if (this.state.data[i]<value) {\n      //       value = this.state.data[i];\n      //     }\n      //   }\n      // }\n      // this.setState({\n      //   low: value\n      // })\n\n\n      _this.startBtn.focus();\n    });\n\n    _this.state = {\n      myArray: [],\n      // <- add initial empty array\n      data: [],\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      lastHigh: 0,\n      low: 0,\n      // lowest value\n      lastLow: 0,\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false // state to detect whether timer has started\n\n    };\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n    _this.textInput = React.createRef();\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(e) {\n      this.setState({\n        milliSecondsElapsed: e.target.milliSecondsElapsed\n      });\n    }\n  }, {\n    key: \"render\",\n    // find the average AT EVERY GO \n    // <td className=\"text\">{this.state.myArray.join(\", \")}</td> line 180\n    // \"striped bordered hover\" was using this in table but it was giving me an error\n    value: function render() {\n      var _this2 = this;\n\n      var myTotal = this.state.total;\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: \"background\",\n        style: {\n          height: 575\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }\n      }, __jsx(Table, {\n        align: \"right\",\n        height: \"200px\",\n        width: \"200px\",\n        className: \"table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 7\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }\n      }, __jsx(\"th\", {\n        className: \"text\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }\n      }, \"Last Time\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }\n      }, __jsx(\"td\", {\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }\n      }, this.state.myArray.join(\", \"))))), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 7\n        }\n      }, \"Press the spacebar to start/stop the timer.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 7\n        }\n      }, \"Press the c button to clear everything.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 7\n        }\n      }, \"Press the d button to delete the last time.\"), __jsx(\"div\", {\n        align: \"center\",\n        className: \"text\",\n        height: \"200px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 8\n        }\n      }, __jsx(\"input\", {\n        value: this.state.milliSecondsElapsed / 100,\n        onChange: this.updateState,\n        ref: this.textInput,\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 10\n        }\n      }), __jsx(\"button\", {\n        onClick: this.handleStart,\n        ref: function ref(_ref) {\n          return _this2.startBtn = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 10\n        }\n      }, \"START\"), __jsx(\"button\", {\n        onClick: this.handleStop,\n        ref: function ref(_ref2) {\n          return _this2.stopBtn = _ref2;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 10\n        }\n      }, \"STOP\"), __jsx(\"button\", {\n        onClick: this.clear,\n        ref: function ref(_ref3) {\n          return _this2.clearBtn = _ref3;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }\n      }, \"CLEAR\"), __jsx(\"button\", {\n        onClick: this[\"delete\"],\n        ref: function ref(_ref4) {\n          return _this2.deleteBtn = _ref4;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }\n      }, \"DELETE\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 10\n        }\n      }, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n        align: \"center\",\n        width: \"200px\",\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        height: \"100px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }\n      }, __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }\n      }, \"Average\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 15\n        }\n      }, \"Fastest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }, \"Slowest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }\n      }, \"Range\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }\n      }, myTotal ? __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 19\n        }\n      }, (this.state.total / this.state.myArray.length / 100).toFixed(2)) : __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 19\n        }\n      }, \" 0 \")), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }\n      }, this.state.low / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }\n      }, this.state.high / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }\n      }, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","Component","Layout","Table","Home","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","clearBtn","deleteBtn","setState","setInterval","focus","average","toFixed","total","last","high","low","previousState","myArray","count","length","range","subtract","data","splice","lastHigh","lastLow","updateState","bind","textInput","createRef","window","addEventListener","keyPress","removeEventListener","target","myTotal","height","join","handleStart","ref","handleStop","clear"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\"\n\n/* I should write a delete last button */\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myArray: [], // <- add initial empty array\n      data: [],\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      lastHigh: 0,\n      low: 0, // lowest value\n      lastLow: 0,\n      count: 0,\n      last: 0, // the last element recieved\n      timerInProgress: false, // state to detect whether timer has started\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n  \n\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n    if (e.keyCode === 99) {\n      this.clearBtn.click();\n    }\n    if (e.keyCode === 100) {\n      this.deleteBtn.click();\n    }\n  };\n\n  handleStart = () => {\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n  handleStop = () => {\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array\n      (previousState) => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n       myArray: [\n          this.state.milliSecondsElapsed / 100, // <-- add new time\n          ...previousState.myArray // <-- shallow copy existing data\n        ]\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }    \n\n    this.setState({\n      count: 1\n    })\n\n\n\n    // it makes the first value equal to the average, then averages the second value on the third run\n    // so on, so forth\n    \n\n  };\n\n  clear = () => {\n    this.setState({\n      average: 0\n    })\n    this.setState({\n      high: 0\n    })\n    this.setState({\n      low: 0\n    })\n    this.setState({\n      total: 0\n    })\n    this.setState({\n      myArray: []\n    })\n    this.setState({\n      range: 0\n    })\n\n    this.startBtn.focus();\n\n  };\n\n      // should delete last element in array AND subtract value from total\n    // then find fastest or slowest time in array and set it to that\n    // if deleted value === fastest or slowest, find what the fastest or slowest was before it\n    // this.setState({\n    //   total: this.state.total - this.state.myArray[this.state.myArray.length]\n    // })\n    // this.state.total / this.state.myArray.length / 100\n  delete = () => { // should delete the last item\n    var subtract = this.state.last;\n    var length = this.state.myArray.length;\n    length = length * 100;\n\n    this.setState({\n      total: this.state.total-subtract // correctly fings new average\n    })\n\n    this.setState({\n      data: this.state.myArray\n    })\n\n    this.setState({ \n      myArray: this.state.myArray.splice(1) \n    })\n\n    if (this.state.milliSecondsElapsed===this.state.low) {\n      // then need to find new low\n      this.setState({\n        low: 0\n      })\n\n      if (length>1) {\n        this.setState({\n          low: this.state.data[1]\n        })\n      }\n\n    }\n\n\n\n    // this.setState({\n    //   lastLow: this.state.low/100\n    // })\n\n    // subtract = subtract / 100;\n\n    // var value = 0;\n\n    // if (length>1) {\n    //   value = this.state.data[1];\n    // }\n\n    // // need to find new low if these are equal\n    // if (this.state.lastLow===subtract) {\n    //   for (var i=1; i<=length; i++) {\n    //     if (this.state.data[i]<value) {\n    //       value = this.state.data[i];\n    //     }\n    //   }\n    // }\n \n    // this.setState({\n    //   low: value\n    // })\n\n    this.startBtn.focus();\n  };\n\n\n  // find the average AT EVERY GO \n  // <td className=\"text\">{this.state.myArray.join(\", \")}</td> line 180\n  // \"striped bordered hover\" was using this in table but it was giving me an error\n  render() {\n    const myTotal = this.state.total;\n    return (\n\t    <Layout>\n      <div className='background' style={{height:575}}>\n\n      <Table align=\"right\" height=\"200px\" width=\"200px\" className='table'>\n        <thead>\n          <tr>\n            <th className=\"text\" align=\"center\">Last Time</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            <td className=\"text\">{this.state.myArray.join(\", \")}</td>\n          </tr>\n        </tbody>\n      </Table>\n\n      <p className=\"text\" align='left'>Press the spacebar to start/stop the timer.</p>\n      <p className=\"text\" align='left'>Press the c button to clear everything.</p>\n      <p className=\"text\" align='left'>Press the d button to delete the last time.</p>\n\n\n\t      <div align='center' className=\"text\" height=\"200px\">\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\n          <button onClick={this.clear} ref={(ref) => (this.clearBtn = ref)}>\n            CLEAR \n          </button>\n\n          <button onClick={this.delete} ref={(ref) => (this.deleteBtn = ref)}>\n            DELETE\n          </button>\n\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n\n\n\n        <table align=\"center\" width=\"200px\" className=\"text\">\n          <thead>\n            <tr height=\"100px\">\n              <th>Average</th>\n              <th>Fastest</th>\n              <th>Slowest</th>\n              <th>Range</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>{myTotal ? (\n                  <td>{(this.state.total / this.state.myArray.length / 100).toFixed(2)}</td>\n                ) : (\n                  <td> 0 </td>\n                )}</td>\n              <td>{this.state.low/100}</td>\n              <td>{this.state.high/100}</td>\n              <td>{(this.state.high/100 - this.state.low/100).toFixed(2)}</td>\n            </tr>\n          </tbody>\n\n\n        </table>\n\n      </div>\n      </Layout>\n\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}