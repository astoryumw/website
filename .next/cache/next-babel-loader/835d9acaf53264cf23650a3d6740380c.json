{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Austin/NewWebsite/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"textInput\", function () {\n      clearInterval(_this.timer);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (_this.state.milliSecondsElapsed === 0) {\n          _this.startBtn.click();\n        } else if (_this.state.timerInProgress === false) {\n          _this.startBtn.click();\n        } else {\n          _this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        _this.clearBtn.click();\n\n        _this.setState({\n          clearMe: true\n        });\n      }\n\n      if (e.keyCode === 100) {\n        _this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      _this.setState({\n        clearMe: false\n      });\n\n      _this.setState({\n        deleteMe: false\n      });\n\n      _this.setState({\n        startTime: Date.now()\n      });\n\n      if (_this.state.timerInProgress === true) return;\n\n      _this.setState({\n        milliSecondsElapsed: 0\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          milliSecondsElapsed: _this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, function () {\n          _this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function () {\n      // console.log(this.state.milliSecondsElapsed);\n      if (_this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        _this.setState({\n          average: (_this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.setState({\n        // adds value to the total\n        total: _this.state.total + _this.state.milliSecondsElapsed\n      });\n\n      _this.setState({\n        last: _this.state.milliSecondsElapsed\n      });\n\n      if (_this.state.high < _this.state.milliSecondsElapsed) {\n        // finds slowest time\n        _this.setState({\n          high: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low === 0) {\n        // finds fastest time\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low > _this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      _this.setState( // adding the value to the array\n      function (previousState) {\n        return {\n          timerInProgress: false,\n          // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n          myArray: [_this.state.milliSecondsElapsed / 100].concat(_toConsumableArray(previousState.myArray))\n        };\n      }, function () {\n        clearInterval(_this.timer);\n\n        _this.startBtn.focus();\n      });\n\n      if (_this.state.count === 1) {\n        _this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (_this.state.total / _this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        count: 1\n      });\n\n      _this.setState({\n        endTime: Date.now()\n      });\n\n      _this.setState({\n        myOldArray: _this.state.myArray\n      });\n\n      _this.setState({\n        length: _this.state.length + 1\n      }); // console.log(this.state.length);\n\n\n      _this.setTimes(); // console.log(this.state.milliSecondsElapsed);\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clear\", function () {\n      _this.setState({\n        average: 0\n      });\n\n      _this.setState({\n        high: 0\n      });\n\n      _this.setState({\n        low: 0\n      });\n\n      _this.setState({\n        total: 0\n      });\n\n      _this.setState({\n        myArray: []\n      });\n\n      _this.setState({\n        range: 0\n      });\n\n      _this.setState({\n        length: 0\n      }); // console.log(this.state.clearMe + \"in the clear\");\n\n\n      _this.startBtn.focus(); // this.setTimes();\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delete\", function () {\n      // should delete the last item\n      var array = _this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        _this.setState({\n          total: 0\n        });\n\n        _this.setState({\n          low: 0\n        });\n\n        _this.setState({\n          high: 0\n        });\n\n        _this.setState({\n          myArray: []\n        });\n      } else {\n        _this.setState({\n          myArray: _this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        });\n\n        _this.setState({\n          low: Math.min.apply(Math, array2) * 100\n        });\n\n        _this.setState({\n          high: Math.max.apply(Math, array2) * 100\n        }); // find average\n\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        _this.setState({\n          total: add * 100\n        });\n      }\n\n      _this.setState({\n        length: _this.state.length - 1\n      }); // this.setTimes();\n\n\n      _this.startBtn.focus();\n    });\n\n    _this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    _this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false,\n      // this becomes true when something is loaded or first number added\n      otherLoading: false,\n      length: 0,\n      // this is the length of the array added for load and save\n      clearMe: false,\n      // if clear make clearMe as true, if clearMe is true then setTimes as 0\n      deleteMe: false,\n      clearOnce: 0\n    };\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n    _this.textInput = /*#__PURE__*/React.createRef();\n    _this.setTimes = _this.setTimes.bind(_assertThisInitialized(_this));\n    _this.getTimes = _this.getTimes.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"keypress\", this.keyPress);\n      this.getTimes();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(e) {\n      this.setState({\n        milliSecondsElapsed: e.target.milliSecondsElapsed\n      });\n    } // press l to load times?\n    // need a way to cancel all of these if someone is entering a time\n\n  }, {\n    key: \"setTimes\",\n    value: function setTimes() {\n      // if (this.state.clearMe == true) { // setTimes as 0\n      //   // console.log(this.state.clearMe);\n      //   let obj = [];\n      //   localStorage.setItem('times', JSON.stringify(obj));\n      //   let obj1 = 0;\n      //   localStorage.setItem('last', JSON.stringify(obj1));\n      //   let obj2 = 0;\n      //   localStorage.setItem('list', JSON.stringify(obj2));\n      //   let obj3 = 0;\n      //   localStorage.setItem('theTotal', JSON.stringify(obj3));\n      //   let obj4 = 0;\n      //   localStorage.setItem('fastest', JSON.stringify(obj4));\n      //   let obj5 = 0;\n      //   localStorage.setItem('slowest', JSON.stringify(obj5));\n      // } else if (this.state.deleteMe) {\n      //   let obj = this.state.myArray;\n      //   localStorage.setItem('times', JSON.stringify(obj));\n      //   let obj1 = this.state.myArray[0];\n      //   localStorage.setItem('last', JSON.stringify(ob1));\n      //   console.log(obj1)\n      //   let obj2 = this.state.length;\n      //   localStorage.setItem('list', JSON.stringify(obj2));\n      //   let obj3 = this.state.total;\n      //   localStorage.setItem('theTotal', JSON.stringify(obj3));\n      //   let obj4 = this.state.low;\n      //   localStorage.setItem('fastest', JSON.stringify(obj4));\n      //   let obj5 = this.state.high;\n      //   localStorage.setItem('slowest', JSON.stringify(obj5));\n      // } else {\n      var obj = this.state.myArray;\n      localStorage.setItem('times', JSON.stringify(obj));\n      var obj1 = this.state.milliSecondsElapsed / 100;\n      localStorage.setItem('last', JSON.stringify(obj1));\n      var obj2 = this.state.length + 1;\n      localStorage.setItem('list', JSON.stringify(obj2)); // console.log(obj2 + \" setlength\");\n\n      var obj3 = this.state.total + this.state.milliSecondsElapsed;\n      localStorage.setItem('theTotal', JSON.stringify(obj3)); // console.log(obj3 + \" settotal\");\n\n      var obj4 = this.state.low; // console.log(obj4 + \" \" + this.state.low);\n\n      var obj6 = this.state.milliSecondsElapsed; // console.log(obj6);\n\n      localStorage.setItem('fastest', JSON.stringify(obj6));\n\n      if (obj4 < obj6 && obj4 != 0) {\n        localStorage.setItem('fastest', JSON.stringify(obj4));\n      } // console.log(obj4 < obj6);\n\n\n      var obj5 = this.state.high;\n      localStorage.setItem('slowest', JSON.stringify(obj6));\n\n      if (obj5 > obj6) {\n        localStorage.setItem('slowest', JSON.stringify(obj5));\n      } // }\n\n    } // retrieve times from localStorage\n\n  }, {\n    key: \"getTimes\",\n    value: function getTimes() {\n      var myTimes = localStorage.getItem('times');\n      myTimes = JSON.parse(myTimes); // this is array\n\n      var myLast = localStorage.getItem('last');\n      myLast = JSON.parse(myLast);\n      var myList = localStorage.getItem('list');\n      myList = JSON.parse(myList); // this for loop is what causes the program to add undefined times\n\n      for (var i = 1; i < myTimes.length; i++) {\n        myTimes[i] = \" \" + myTimes[i];\n      }\n\n      this.setState(function (previousState) {\n        return {\n          myArray: [myLast, myTimes]\n        };\n      }); // console.log(myLast + \" \" + myTimes);\n\n      var myTotal = localStorage.getItem('theTotal');\n      myTotal = JSON.parse(myTotal); // console.log(myTotal + \" gettotal\");\n\n      this.setState({\n        total: myTotal\n      });\n      this.setState({\n        length: myList\n      }); // console.log(myList + \" getlength\");\n\n      var myFastest = localStorage.getItem('fastest');\n      myFastest = JSON.parse(myFastest);\n      console.log(myFastest);\n      this.setState({\n        low: myFastest\n      });\n      var mySlowest = localStorage.getItem('slowest');\n      mySlowest = JSON.parse(mySlowest);\n      this.setState({\n        high: mySlowest\n      });\n    } //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var myTotal = this.state.total; // console.log(this.state.myArray);\n\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: \"background\",\n        style: {\n          height: 575\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 7\n        }\n      }, __jsx(\"table\", {\n        align: \"right\",\n        className: \"antTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 7\n        }\n      }, __jsx(Table, {\n        align: \"center\",\n        height: \"150px\",\n        className: \"myTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 7\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }\n      }, __jsx(\"th\", {\n        className: \"text\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }\n      }, \"Last Time\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }\n      }, __jsx(\"td\", {\n        className: \"text\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 17\n        }\n      }, this.state.myArray.join(\", \"))))))), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 58\n        }\n      }, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 58\n        }\n      }, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 58\n        }\n      }, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Lastly, write your name and then the time below \"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 7\n        }\n      }, \" \\u2002 of your best time. Then, hit the add button to \"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 7\n        }\n      }, \" \\u2002 add your time to the database! \"), __jsx(App, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 7\n        }\n      }), __jsx(\"div\", {\n        align: \"center\",\n        className: \"center\",\n        height: \"200px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 8\n        }\n      }, __jsx(\"input\", {\n        value: this.state.milliSecondsElapsed / 100,\n        onChange: this.updateState,\n        ref: this.textInput,\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 10\n        }\n      }), __jsx(\"button\", {\n        onClick: this.handleStart,\n        ref: function ref(_ref) {\n          return _this2.startBtn = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 10\n        }\n      }, \"START\"), __jsx(\"button\", {\n        onClick: this.handleStop,\n        ref: function ref(_ref2) {\n          return _this2.stopBtn = _ref2;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 10\n        }\n      }, \"STOP\"), __jsx(\"button\", {\n        onClick: this.clear,\n        ref: function ref(_ref3) {\n          return _this2.clearBtn = _ref3;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }\n      }, \"CLEAR\"), __jsx(\"button\", {\n        onClick: this[\"delete\"],\n        ref: function ref(_ref4) {\n          return _this2.deleteBtn = _ref4;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }\n      }, \"DELETE\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 10\n        }\n      }, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n        align: \"center\",\n        width: \"200px\",\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 9\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        height: \"100px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }\n      }, __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 15\n        }\n      }, \"Average\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 15\n        }\n      }, \"Fastest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }\n      }, \"Slowest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 15\n        }\n      }, \"Range\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 15\n        }\n      }, myTotal ? __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 19\n        }\n      }, (this.state.total / this.state.length / 100).toFixed(2)) : __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 19\n        }\n      }, \" 0 \")), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 15\n        }\n      }, this.state.low / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 15\n        }\n      }, this.state.high / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 15\n        }\n      }, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/Users/Austin/NewWebsite/website/pages/index.js"],"names":["React","Component","Layout","Table","addTime","App","Home","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","clearBtn","setState","clearMe","deleteBtn","deleteMe","startTime","Date","now","setInterval","focus","average","toFixed","loading","total","last","high","low","previousState","myArray","count","length","endTime","myOldArray","setTimes","range","array","array2","add","u","push","splice","Math","min","max","i","name","otherLoading","clearOnce","updateState","bind","textInput","createRef","getTimes","window","addEventListener","keyPress","removeEventListener","target","obj","localStorage","setItem","JSON","stringify","obj1","obj2","obj3","obj4","obj6","obj5","myTimes","getItem","parse","myLast","myList","myTotal","myFastest","console","log","mySlowest","height","join","handleStart","ref","handleStop","clear"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\"\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name:\"...\"};\n    // this.state = {difference: 0};\n    this.state = {\n      myArray: [], // <- add initial empty array\n      myOldArray: [], // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 0, // lowest value\n      count: 0,\n      last: 0, // the last element recieved\n      timerInProgress: false, // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false, // this becomes true when something is loaded or first number added\n      otherLoading: false,\n      length: 0, // this is the length of the array added for load and save\n      clearMe: false, // if clear make clearMe as true, if clearMe is true then setTimes as 0\n      deleteMe: false,\n      clearOnce: 0,\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n    this.getTimes();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n\n\n  // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n    if (e.keyCode === 99) {\n      this.clearBtn.click();\n      this.setState({\n        clearMe: true\n      })\n    }\n    if (e.keyCode === 100) {\n      this.deleteBtn.click();\n    }\n  };\n\n  handleStart = () => {\n\n    this.setState({\n      clearMe: false\n    })\n\n    this.setState({\n      deleteMe: false\n    })\n\n    this.setState({\n      startTime: Date.now()\n    })\n\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n\n  handleStop = () => {\n    // console.log(this.state.milliSecondsElapsed);\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n\n    this.setState({ loading: true });\n\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array\n      (previousState) => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n       myArray: [\n          this.state.milliSecondsElapsed / 100, // <-- add new time\n          ...previousState.myArray // <-- shallow copy existing data\n        ],\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }    \n\n    this.setState({\n      count: 1\n    })\n\n    this.setState({\n      endTime: Date.now()\n    })\n\n    this.setState({\n      myOldArray: this.state.myArray\n    })\n\n    this.setState({\n      length: this.state.length + 1\n    })\n    // console.log(this.state.length);\n    this.setTimes();\n    // console.log(this.state.milliSecondsElapsed);\n\n  };\n\n  clear = () => {\n    this.setState({\n      average: 0\n    })\n    this.setState({\n      high: 0\n    })\n    this.setState({\n      low: 0\n    })\n    this.setState({\n      total: 0\n    })\n    this.setState({\n      myArray: []\n    })\n    this.setState({\n      range: 0\n    })\n    this.setState({\n      length: 0\n    })\n\n    // console.log(this.state.clearMe + \"in the clear\");\n    this.startBtn.focus();\n\n    // this.setTimes();\n\n  };\n\n\n  delete = () => { // should delete the last item\n    \n    var array=this.state.myArray;\n    var array2=[];\n\n    var last = array[0]\n    var add=0;\n\n    // if array2 is empty - get rid of things saying infinity\n\n    for (var u=1; u<array.length; u++) {\n      array2.push(array[u]);\n    }\n\n    if (array2.length == 0) {\n      this.setState({\n        total: 0\n      })\n      this.setState({\n        low: 0\n      })\n      this.setState({\n        high: 0\n      })\n      this.setState({\n        myArray: []\n      })\n    } else {\n      this.setState({ \n        myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n      })\n      this.setState({\n        low: (Math.min(...array2)*100)\n      })\n      this.setState({\n        high: (Math.max(...array2)*100)\n      })\n      // find average\n      for (var i=0; i<array2.length; i++) {\n        add = add + array2[i];\n      }\n      this.setState({\n        total: add*100\n      })\n    }\n    this.setState({\n      length: this.state.length - 1\n    })\n\n    // this.setTimes();\n    this.startBtn.focus();\n  };\n\n  setTimes() {\n    \n    // if (this.state.clearMe == true) { // setTimes as 0\n    //   // console.log(this.state.clearMe);\n    //   let obj = [];\n    //   localStorage.setItem('times', JSON.stringify(obj));\n\n    //   let obj1 = 0;\n    //   localStorage.setItem('last', JSON.stringify(obj1));\n\n    //   let obj2 = 0;\n    //   localStorage.setItem('list', JSON.stringify(obj2));\n\n    //   let obj3 = 0;\n    //   localStorage.setItem('theTotal', JSON.stringify(obj3));\n\n    //   let obj4 = 0;\n    //   localStorage.setItem('fastest', JSON.stringify(obj4));\n\n    //   let obj5 = 0;\n    //   localStorage.setItem('slowest', JSON.stringify(obj5));\n\n    // } else if (this.state.deleteMe) {\n    //   let obj = this.state.myArray;\n    //   localStorage.setItem('times', JSON.stringify(obj));\n\n    //   let obj1 = this.state.myArray[0];\n    //   localStorage.setItem('last', JSON.stringify(ob1));\n    //   console.log(obj1)\n    //   let obj2 = this.state.length;\n    //   localStorage.setItem('list', JSON.stringify(obj2));\n\n    //   let obj3 = this.state.total;\n    //   localStorage.setItem('theTotal', JSON.stringify(obj3));\n\n    //   let obj4 = this.state.low;\n    //   localStorage.setItem('fastest', JSON.stringify(obj4));\n\n    //   let obj5 = this.state.high;\n    //   localStorage.setItem('slowest', JSON.stringify(obj5));\n\n    // } else {\n      let obj = this.state.myArray;\n      localStorage.setItem('times', JSON.stringify(obj));\n\n      let obj1 = this.state.milliSecondsElapsed/100;\n      localStorage.setItem('last', JSON.stringify(obj1));\n\n      let obj2 = this.state.length + 1;\n      localStorage.setItem('list', JSON.stringify(obj2));\n      // console.log(obj2 + \" setlength\");\n\n      let obj3 = this.state.total + this.state.milliSecondsElapsed;\n      localStorage.setItem('theTotal', JSON.stringify(obj3));\n      // console.log(obj3 + \" settotal\");\n\n      let obj4 = this.state.low;\n      // console.log(obj4 + \" \" + this.state.low);\n      let obj6 = this.state.milliSecondsElapsed;\n      // console.log(obj6);\n      localStorage.setItem('fastest', JSON.stringify(obj6));\n      if (obj4 < obj6 && obj4 != 0) {\n        localStorage.setItem('fastest', JSON.stringify(obj4));\n      } \n      // console.log(obj4 < obj6);\n\n      let obj5 = this.state.high;\n      localStorage.setItem('slowest', JSON.stringify(obj6));\n      if (obj5 > obj6) {\n        localStorage.setItem('slowest', JSON.stringify(obj5));\n      }\n    // }\n  }\n\n  // retrieve times from localStorage\n  getTimes() {\n    let myTimes = localStorage.getItem('times');\n    myTimes = JSON.parse(myTimes); // this is array\n\n    let myLast = localStorage.getItem('last');\n    myLast = JSON.parse(myLast);\n\n    let myList = localStorage.getItem('list');\n    myList = JSON.parse(myList);\n\n    // this for loop is what causes the program to add undefined times\n    for (var i=1; i<myTimes.length;i++) {\n      myTimes[i] = \" \" + myTimes[i]; \n    }\n\n    this.setState(previousState => ({\n      myArray: [myLast, myTimes]\n    }));\n    // console.log(myLast + \" \" + myTimes);\n\n    let myTotal = localStorage.getItem('theTotal');\n    myTotal = JSON.parse(myTotal);\n    // console.log(myTotal + \" gettotal\");\n\n    this.setState({\n      total: myTotal\n    });\n\n    this.setState({ length: myList });\n    // console.log(myList + \" getlength\");\n\n    let myFastest = localStorage.getItem('fastest');\n    myFastest = JSON.parse(myFastest);\n    console.log(myFastest);\n    this.setState({\n      low: myFastest\n    });\n\n    let mySlowest = localStorage.getItem('slowest');\n    mySlowest = JSON.parse(mySlowest);\n    this.setState({\n      high: mySlowest\n    });\n  }\n\n//       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  render() {\n    const myTotal = this.state.total;\n    // console.log(this.state.myArray);\n    return (\n\t    <Layout>\n      <div className='background' style={{height:575}}>\n\n\n\n      <div>\n      <table align=\"right\" className='antTable'>\n      <Table align=\"center\" height=\"150px\" className='myTable'>\n        <thead>\n          <tr>\n            <th className=\"text\" align=\"center\">Last Time</th>\n          \n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n                <td className=\"text\" align=\"center\">{this.state.myArray.join(\", \")}</td>  \n            \n          </tr>\n        </tbody>\n\n      </Table>\n      \n      </table>\n      </div>\n\n      <p className=\"text\" align='left'> &ensp; Press the <b>spacebar</b> to start/stop the timer.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>c</b> button to clear everything.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>d</b> button to delete the last time.</p>\n      <p className=\"text\" align='left'> &ensp; Lastly, write your name and then the time below </p>\n      <p className=\"text\" align='left'> &ensp; of your best time. Then, hit the add button to </p>\n      <p className=\"text\" align='left'> &ensp; add your time to the database! </p>\n      <App />\n\n\n\n\n\t      <div align='center' className=\"center\" height=\"200px\">\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\n          <button onClick={this.clear} ref={(ref) => (this.clearBtn = ref)}>\n            CLEAR \n          </button>\n\n          <button onClick={this.delete} ref={(ref) => (this.deleteBtn = ref)}>\n            DELETE\n          </button>\n\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n\n\n\n        <table align=\"center\" width=\"200px\" className=\"text\">\n          <thead>\n            <tr height=\"100px\">\n              <th>Average</th>\n              <th>Fastest</th>\n              <th>Slowest</th>\n              <th>Range</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>{myTotal ? (\n                  <td>{(this.state.total / this.state.length / 100).toFixed(2)}</td>\n                ) : (\n                  <td> 0 </td>\n                )}</td>\n              <td>{this.state.low/100}</td>\n              <td>{this.state.high/100}</td>\n              <td>{(this.state.high/100 - this.state.low/100).toFixed(2)}</td>\n            </tr>\n          </tbody>\n         </table>\n\n      </div>\n\n\n\n      </Layout>\n\n\n    );\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}