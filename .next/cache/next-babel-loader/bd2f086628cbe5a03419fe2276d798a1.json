{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/NewWebsite/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (this.state.milliSecondsElapsed === 0) {\n          this.startBtn.click();\n        } else if (this.state.timerInProgress === false) {\n          this.startBtn.click();\n        } else {\n          this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        this.clearBtn.click();\n        this.setState({\n          clearMe: true\n        });\n      }\n\n      if (e.keyCode === 100) {\n        this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      this.setState({\n        clearMe: false\n      });\n      this.setState({\n        deleteMe: false\n      });\n\n      if (isNaN(this.state.low)) {\n        this.setState({\n          low: 0\n        });\n      }\n\n      if (isNaN(this.state.high)) {\n        this.setState({\n          high: 0\n        });\n      }\n\n      if (isNaN(this.state.total)) {\n        this.setState({\n          total: 0\n        });\n      }\n\n      this.setState({\n        startTime: Date.now()\n      });\n      if (this.state.timerInProgress === true) return;\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, () => {\n          this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      // console.log(this.state.milliSecondsElapsed);\n      if (this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        this.setState({\n          average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        // adds value to the total\n        total: this.state.total + this.state.milliSecondsElapsed\n      });\n      this.setState({\n        last: this.state.milliSecondsElapsed\n      });\n\n      if (this.state.high < this.state.milliSecondsElapsed) {\n        // finds slowest time\n        this.setState({\n          high: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low === 0) {\n        // finds fastest time\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low > this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      this.setState( // adding the value to the array\n      previousState => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n        myArray: [this.state.milliSecondsElapsed / 100, // <-- add new time\n        ...previousState.myArray // <-- shallow copy existing data\n        ]\n      }), () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      });\n\n      if (this.state.count === 1) {\n        this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        count: 1\n      });\n      this.setState({\n        endTime: Date.now()\n      });\n      this.setState({\n        myOldArray: this.state.myArray\n      });\n      this.setState({\n        length: this.state.length + 1\n      });\n      this.setState({\n        testArray: this.state.myArray\n      }); // console.log(this.state.length);\n\n      this.setTimes(); // console.log(this.state.milliSecondsElapsed);\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      this.setState({\n        average: 0\n      });\n      this.setState({\n        high: 0\n      });\n      this.setState({\n        low: 0\n      });\n      this.setState({\n        total: 0\n      });\n      this.setState({\n        myArray: []\n      });\n      this.setState({\n        range: 0\n      });\n      this.setState({\n        length: 0\n      });\n      this.setState({\n        clearMe: true\n      }); // console.log(this.state.clearMe + \"in the clear\");\n      // this.setTimes();\n\n      this.startBtn.focus();\n    });\n\n    _defineProperty(this, \"delete\", () => {\n      // should delete the last item\n      var array = this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        this.setState({\n          total: 0\n        });\n        this.setState({\n          low: 0\n        });\n        this.setState({\n          high: 0\n        });\n        this.setState({\n          myArray: []\n        });\n      } else {\n        this.setState({\n          myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        });\n        this.setState({\n          low: Math.min(...array2) * 100\n        });\n        this.setState({\n          high: Math.max(...array2) * 100\n        }); // find average\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        this.setState({\n          total: add * 100\n        });\n      }\n\n      this.setState({\n        length: this.state.length - 1\n      });\n      this.setState({\n        deleteMe: true\n      }); // this.setTimes();\n\n      this.startBtn.focus(); // console.log(this.state.testArray);\n    });\n\n    this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false,\n      // this becomes true when something is loaded or first number added\n      otherLoading: false,\n      length: 0,\n      // this is the length of the array added for load and save\n      clearMe: false,\n      // if clear make clearMe as true, if clearMe is true then setTimes as 0\n      deleteMe: false,\n      clearOnce: 0,\n      testArray: []\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = /*#__PURE__*/React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n    this.getTimes();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  } // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n\n\n  setTimes() {\n    if (this.state.clearMe == true) {\n      let obj = [];\n      localStorage.setItem('times', JSON.stringify(obj));\n      let obj1 = 0;\n      localStorage.setItem('last', JSON.stringify(obj1));\n      let obj2 = 0;\n      localStorage.setItem('list', JSON.stringify(obj2));\n      let obj3 = 0;\n      localStorage.setItem('theTotal', JSON.stringify(obj3));\n      let obj4 = 0;\n      localStorage.setItem('fastest', JSON.stringify(obj4));\n      let obj5 = 0;\n      localStorage.setItem('slowest', JSON.stringify(obj5));\n    } else {\n      let obj = this.state.myArray;\n      localStorage.setItem('times', JSON.stringify(obj));\n      console.log(obj);\n      let obj1 = this.state.milliSecondsElapsed / 100;\n      localStorage.setItem('last', JSON.stringify(obj1));\n      console.log(obj1);\n      let obj2 = this.state.length + 1;\n      localStorage.setItem('list', JSON.stringify(obj2)); // console.log(obj2 + \" setlength\");\n      // console.log(this.state.total)\n\n      let obj3 = this.state.total + this.state.milliSecondsElapsed;\n      localStorage.setItem('theTotal', JSON.stringify(obj3));\n      console.log(obj3 + \" total\");\n      let obj4 = this.state.low; // console.log(obj4 + \" \" + this.state.low);\n\n      let obj6 = this.state.milliSecondsElapsed; // console.log(obj6);\n\n      localStorage.setItem('fastest', JSON.stringify(obj6));\n\n      if (obj4 < obj6 && obj4 != 0) {\n        localStorage.setItem('fastest', JSON.stringify(obj4));\n      } // console.log(obj4 < obj6);\n\n\n      let obj5 = this.state.high;\n      localStorage.setItem('slowest', JSON.stringify(obj6));\n\n      if (obj5 > obj6) {\n        localStorage.setItem('slowest', JSON.stringify(obj5));\n      }\n    }\n  } // retrieve times from localStorage\n\n\n  getTimes() {\n    let myTimes = localStorage.getItem('times');\n    myTimes = JSON.parse(myTimes); // this is array\n\n    let myLast = localStorage.getItem('last');\n    myLast = JSON.parse(myLast);\n    let myList = localStorage.getItem('list');\n    myList = JSON.parse(myList); // this for loop is what causes the program to add undefined times\n\n    for (var i = 1; i < myTimes.length; i++) {\n      myTimes[i] = \" \" + myTimes[i];\n    }\n\n    this.setState(previousState => ({\n      myArray: [myLast, myTimes]\n    })); // console.log(myLast + \" \" + myTimes);\n\n    let myTotal = localStorage.getItem('theTotal');\n    myTotal = JSON.parse(myTotal); // console.log(myTotal + \" gettotal\");\n\n    this.setState({\n      total: myTotal\n    });\n    this.setState({\n      length: myList\n    }); // console.log(myList + \" getlength\");\n\n    let myFastest = localStorage.getItem('fastest');\n    myFastest = JSON.parse(myFastest);\n    console.log(myFastest);\n    this.setState({\n      low: myFastest\n    });\n    let mySlowest = localStorage.getItem('slowest');\n    mySlowest = JSON.parse(mySlowest);\n    this.setState({\n      high: mySlowest\n    });\n  } //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n\n  render() {\n    const myTotal = this.state.total; // console.log(this.state.myArray);\n\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 6\n      }\n    }, __jsx(\"div\", {\n      className: \"background\",\n      style: {\n        height: 575\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 7\n      }\n    }, __jsx(\"table\", {\n      align: \"right\",\n      className: \"antTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 7\n      }\n    }, __jsx(Table, {\n      align: \"center\",\n      height: \"150px\",\n      className: \"myTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 7\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }\n    }, __jsx(\"th\", {\n      className: \"text\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 13\n      }\n    }, \"Last Time\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }\n    }, __jsx(\"td\", {\n      className: \"text\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }\n    }, this.state.myArray.join(\", \"))))))), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Press the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 58\n      }\n    }, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Press the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 58\n      }\n    }, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Press the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 58\n      }\n    }, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Lastly, write your name and then the time below \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 7\n      }\n    }, \" \\u2002 of your best time. Then, hit the add button to \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 7\n      }\n    }, \" \\u2002 add your time to the database! \"), __jsx(App, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      align: \"center\",\n      className: \"center\",\n      height: \"200px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 8\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed / 100,\n      onChange: this.updateState,\n      ref: this.textInput,\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 10\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 10\n      }\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.stopBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 10\n      }\n    }, \"STOP\"), __jsx(\"button\", {\n      onClick: this.clear,\n      ref: ref => this.clearBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 11\n      }\n    }, \"CLEAR\"), __jsx(\"button\", {\n      onClick: this.delete,\n      ref: ref => this.deleteBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }\n    }, \"DELETE\"), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 10\n      }\n    }, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n      align: \"center\",\n      width: \"200px\",\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 11\n      }\n    }, __jsx(\"tr\", {\n      height: \"100px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 13\n      }\n    }, __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 15\n      }\n    }, \"Average\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 15\n      }\n    }, \"Fastest\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 15\n      }\n    }, \"Slowest\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 15\n      }\n    }, \"Range\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 13\n      }\n    }, __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 15\n      }\n    }, myTotal ? __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 19\n      }\n    }, (this.state.total / this.state.length / 100).toFixed(2)) : __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 19\n      }\n    }, \" 0 \")), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 15\n      }\n    }, this.state.low / 100), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 15\n      }\n    }, this.state.high / 100), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 15\n      }\n    }, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Austin/NewWebsite/website/pages/index.js"],"names":["React","Component","Layout","Table","addTime","App","Home","constructor","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","clearBtn","setState","clearMe","deleteBtn","deleteMe","isNaN","low","high","total","startTime","Date","now","setInterval","focus","average","toFixed","loading","last","previousState","myArray","count","length","endTime","myOldArray","testArray","setTimes","range","array","array2","add","u","push","splice","Math","min","max","i","name","otherLoading","clearOnce","updateState","bind","textInput","createRef","getTimes","componentDidMount","window","addEventListener","keyPress","componentWillUnmount","removeEventListener","target","obj","localStorage","setItem","JSON","stringify","obj1","obj2","obj3","obj4","obj5","console","log","obj6","myTimes","getItem","parse","myLast","myList","myTotal","myFastest","mySlowest","render","height","join","handleStart","ref","handleStop","clear","delete"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\"\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name:\"...\"};\n    // this.state = {difference: 0};\n    this.state = {\n      myArray: [], // <- add initial empty array\n      myOldArray: [], // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 0, // lowest value\n      count: 0,\n      last: 0, // the last element recieved\n      timerInProgress: false, // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false, // this becomes true when something is loaded or first number added\n      otherLoading: false,\n      length: 0, // this is the length of the array added for load and save\n      clearMe: false, // if clear make clearMe as true, if clearMe is true then setTimes as 0\n      deleteMe: false,\n      clearOnce: 0,\n      testArray: [],\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n    this.getTimes();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n\n\n  // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n    if (e.keyCode === 99) {\n      this.clearBtn.click();\n      this.setState({\n        clearMe: true\n      })\n    }\n    if (e.keyCode === 100) {\n      this.deleteBtn.click();\n    }\n  };\n\n  handleStart = () => {\n\n    this.setState({\n      clearMe: false\n    })\n\n    this.setState({\n      deleteMe: false\n    })\n\n    if (isNaN(this.state.low)) {\n      this.setState({\n        low: 0\n      })\n    }\n\n    if (isNaN(this.state.high)) {\n      this.setState({\n        high: 0\n      })\n    }\n\n    if (isNaN(this.state.total)) {\n      this.setState({\n        total: 0\n      })\n    }\n\n    this.setState({\n      startTime: Date.now()\n    })\n\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n\n  handleStop = () => {\n    // console.log(this.state.milliSecondsElapsed);\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n\n    this.setState({ loading: true });\n\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array\n      (previousState) => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n       myArray: [\n          this.state.milliSecondsElapsed / 100, // <-- add new time\n          ...previousState.myArray // <-- shallow copy existing data\n        ],\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }    \n\n    this.setState({\n      count: 1\n    })\n\n    this.setState({\n      endTime: Date.now()\n    })\n\n    this.setState({\n      myOldArray: this.state.myArray\n    })\n\n    this.setState({\n      length: this.state.length + 1\n    })\n\n    this.setState({\n      testArray: this.state.myArray\n    })\n    // console.log(this.state.length);\n    this.setTimes();\n    // console.log(this.state.milliSecondsElapsed);\n\n  };\n\n  clear = () => {\n    this.setState({\n      average: 0\n    })\n    this.setState({\n      high: 0\n    })\n    this.setState({\n      low: 0\n    })\n    this.setState({\n      total: 0\n    })\n    this.setState({\n      myArray: []\n    })\n    this.setState({\n      range: 0\n    })\n    this.setState({\n      length: 0\n    })\n    this.setState({\n      clearMe: true\n    })\n\n    // console.log(this.state.clearMe + \"in the clear\");\n    // this.setTimes();\n    this.startBtn.focus();\n\n    \n\n  };\n\n\n  delete = () => { // should delete the last item\n    \n    var array=this.state.myArray;\n    var array2=[];\n\n    var last = array[0]\n    var add=0;\n\n    // if array2 is empty - get rid of things saying infinity\n\n    for (var u=1; u<array.length; u++) {\n      array2.push(array[u]);\n    }\n\n    if (array2.length == 0) {\n      this.setState({\n        total: 0\n      })\n      this.setState({\n        low: 0\n      })\n      this.setState({\n        high: 0\n      })\n      this.setState({\n        myArray: []\n      })\n    } else {\n      this.setState({ \n        myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n      })\n      this.setState({\n        low: (Math.min(...array2)*100)\n      })\n      this.setState({\n        high: (Math.max(...array2)*100)\n      })\n      // find average\n      for (var i=0; i<array2.length; i++) {\n        add = add + array2[i];\n      }\n      this.setState({\n        total: add*100\n      })\n    }\n    this.setState({\n      length: this.state.length - 1\n    })\n    this.setState({\n      deleteMe: true\n    })\n    // this.setTimes();\n    this.startBtn.focus();\n\n    // console.log(this.state.testArray);\n\n\n  };\n\n  setTimes() {\n    if (this.state.clearMe == true) {\n        let obj = [];\n        localStorage.setItem('times', JSON.stringify(obj));\n\n        let obj1 = 0;\n        localStorage.setItem('last', JSON.stringify(obj1));\n\n        let obj2 = 0;\n        localStorage.setItem('list', JSON.stringify(obj2));\n\n        let obj3 = 0;\n        localStorage.setItem('theTotal', JSON.stringify(obj3));\n\n        let obj4 = 0;\n        localStorage.setItem('fastest', JSON.stringify(obj4));\n\n        let obj5 = 0;\n        localStorage.setItem('slowest', JSON.stringify(obj5));\n    } else {\n        let obj = this.state.myArray;\n        localStorage.setItem('times', JSON.stringify(obj));\n        console.log(obj);\n\n        let obj1 = this.state.milliSecondsElapsed/100;\n        localStorage.setItem('last', JSON.stringify(obj1));\n        console.log(obj1);\n\n        let obj2 = this.state.length + 1;\n        localStorage.setItem('list', JSON.stringify(obj2));\n        // console.log(obj2 + \" setlength\");\n\n        // console.log(this.state.total)\n        let obj3 = this.state.total + this.state.milliSecondsElapsed;\n        localStorage.setItem('theTotal', JSON.stringify(obj3));\n        console.log(obj3 + \" total\");\n\n        let obj4 = this.state.low;\n        // console.log(obj4 + \" \" + this.state.low);\n        let obj6 = this.state.milliSecondsElapsed;\n        // console.log(obj6);\n        localStorage.setItem('fastest', JSON.stringify(obj6));\n        if (obj4 < obj6 && obj4 != 0) {\n          localStorage.setItem('fastest', JSON.stringify(obj4));\n        } \n        // console.log(obj4 < obj6);\n\n        let obj5 = this.state.high;\n        localStorage.setItem('slowest', JSON.stringify(obj6));\n        if (obj5 > obj6) {\n          localStorage.setItem('slowest', JSON.stringify(obj5));\n        }\n      }\n    \n  }\n\n  // retrieve times from localStorage\n  getTimes() {\n    let myTimes = localStorage.getItem('times');\n    myTimes = JSON.parse(myTimes); // this is array\n\n    let myLast = localStorage.getItem('last');\n    myLast = JSON.parse(myLast);\n\n    let myList = localStorage.getItem('list');\n    myList = JSON.parse(myList);\n\n    // this for loop is what causes the program to add undefined times\n    for (var i=1; i<myTimes.length;i++) {\n      myTimes[i] = \" \" + myTimes[i]; \n    }\n\n    this.setState(previousState => ({\n      myArray: [myLast, myTimes]\n    }));\n    // console.log(myLast + \" \" + myTimes);\n\n    let myTotal = localStorage.getItem('theTotal');\n    myTotal = JSON.parse(myTotal);\n    // console.log(myTotal + \" gettotal\");\n\n    this.setState({\n      total: myTotal\n    });\n\n    this.setState({ length: myList });\n    // console.log(myList + \" getlength\");\n\n    let myFastest = localStorage.getItem('fastest');\n    myFastest = JSON.parse(myFastest);\n    console.log(myFastest);\n    this.setState({\n      low: myFastest\n    });\n\n    let mySlowest = localStorage.getItem('slowest');\n    mySlowest = JSON.parse(mySlowest);\n    this.setState({\n      high: mySlowest\n    });\n  }\n\n//       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  render() {\n    const myTotal = this.state.total;\n    // console.log(this.state.myArray);\n    return (\n\t    <Layout>\n      <div className='background' style={{height:575}}>\n\n\n\n      <div>\n      <table align=\"right\" className='antTable'>\n      <Table align=\"center\" height=\"150px\" className='myTable'>\n        <thead>\n          <tr>\n            <th className=\"text\" align=\"center\">Last Time</th>\n          \n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n                <td className=\"text\" align=\"center\">{this.state.myArray.join(\", \")}</td>  \n            \n          </tr>\n        </tbody>\n\n      </Table>\n      \n      </table>\n      </div>\n\n      <p className=\"text\" align='left'> &ensp; Press the <b>spacebar</b> to start/stop the timer.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>c</b> button to clear everything.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>d</b> button to delete the last time.</p>\n      <p className=\"text\" align='left'> &ensp; Lastly, write your name and then the time below </p>\n      <p className=\"text\" align='left'> &ensp; of your best time. Then, hit the add button to </p>\n      <p className=\"text\" align='left'> &ensp; add your time to the database! </p>\n      <App />\n\n\n\n\n\t      <div align='center' className=\"center\" height=\"200px\">\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\n          <button onClick={this.clear} ref={(ref) => (this.clearBtn = ref)}>\n            CLEAR \n          </button>\n\n          <button onClick={this.delete} ref={(ref) => (this.deleteBtn = ref)}>\n            DELETE\n          </button>\n\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n\n\n\n        <table align=\"center\" width=\"200px\" className=\"text\">\n          <thead>\n            <tr height=\"100px\">\n              <th>Average</th>\n              <th>Fastest</th>\n              <th>Slowest</th>\n              <th>Range</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>{myTotal ? (\n                  <td>{(this.state.total / this.state.length / 100).toFixed(2)}</td>\n                ) : (\n                  <td> 0 </td>\n                )}</td>\n              <td>{this.state.low/100}</td>\n              <td>{this.state.high/100}</td>\n              <td>{(this.state.high/100 - this.state.low/100).toFixed(2)}</td>\n            </tr>\n          </tbody>\n         </table>\n\n      </div>\n\n\n\n      </Layout>\n\n\n    );\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}