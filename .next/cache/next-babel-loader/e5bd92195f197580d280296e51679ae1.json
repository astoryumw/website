{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useReducer, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Home extends React.Component {\n  // focus on start button before timer is started\n  // once its started switch focus to stop button\n  // redo\n  constructor(props) {\n    super(props); // create milliSeconds\n\n    this.state = {\n      milliSecondsElapsed: 0\n    };\n    this.updateState = this.updateState.bind(this);\n    this.clearInput = this.clearInput.bind(this); // this.handleChange = this.handleChange.bind(this);\n    // this.myRef = React.createRef();\n    // this.focusRef = this.focusRef.bind(this);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  } // when button is pressed will clear as 0, now need to add stopwatch and then make accesable by spacebar\n\n\n  clearInput() {\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    ReactDOM.findDOMNode(this.refs.myInput).focus();\n  } // update setState({milliSecondsElapsd: 0})\n  // focusRef() {\n  // \tthis.myRef.current.focus();\n  // }\n  // handleChange(e) {\n  // \tthis.setState({milliSecondsElapsed: e.target.milliSecondsElapsed});\n  // } \n  // handleSubmit = e => {\n  // \te.preventDefault();\n  // }\n\n\n  getMilliseconds() {\n    return (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n  } // var number = this.state.milliSecondsElapsed.toString().length;\n\n\n  getSeconds() {\n    var milli = this.state.milliSecondsElapsed;\n    var seconds = 0;\n    seconds = milli / 100;\n    var myTrunc = Math.trunc(seconds);\n    myTrunc = myTrunc % 60;\n    return (\"0\" + myTrunc).slice(-2);\n  }\n\n  getMinutes() {\n    var milli = this.state.milliSecondsElapsed;\n    var seconds = 0;\n    var minutes = 0;\n    seconds = milli / 100;\n    minutes = seconds / 60;\n    var myTrunc = Math.trunc(minutes);\n    return (\"0\" + myTrunc).slice(-2);\n  } // <input value={this.state.milliSecondsElapsed} ref={this.myRef} onChange={this.handleChange} />\n\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 4\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed,\n      onChange: this.updateState,\n      ref: \"myInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }), __jsx(\"button\", {\n      onClick: this.clearInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }\n    }, \"CLEAR\"), __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }, this.state.data));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","useEffect","useReducer","useRef","ReactDOM","Home","Component","constructor","props","state","milliSecondsElapsed","updateState","bind","clearInput","e","setState","target","findDOMNode","refs","myInput","focus","getMilliseconds","slice","getSeconds","milli","seconds","myTrunc","Math","trunc","getMinutes","minutes","render","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,EAAsCC,MAAtC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAElC;AACA;AACA;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN,EADkB,CAGlB;;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,mBAAmB,EAAE;AAAtB,KAAb;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB,CANkB,CAOlB;AACA;AACA;AAEA;;AAEDD,EAAAA,WAAW,CAACG,CAAD,EAAI;AACd,SAAKC,QAAL,CAAc;AAACL,MAAAA,mBAAmB,EAAEI,CAAC,CAACE,MAAF,CAASN;AAA/B,KAAd;AACA,GArBiC,CAuBlC;;;AACAG,EAAAA,UAAU,GAAG;AACZ,SAAKE,QAAL,CAAc;AAACL,MAAAA,mBAAmB,EAAE;AAAtB,KAAd;AACAN,IAAAA,QAAQ,CAACa,WAAT,CAAqB,KAAKC,IAAL,CAAUC,OAA/B,EAAwCC,KAAxC;AACA,GA3BiC,CA6BlC;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;;;AAEAC,EAAAA,eAAe,GAAG;AACjB,WAAO,CAAC,MAAM,KAAKZ,KAAL,CAAWC,mBAAlB,EAAuCY,KAAvC,CAA6C,CAAC,CAA9C,CAAP;AACA,GA/CiC,CAkDlC;;;AACAC,EAAAA,UAAU,GAAG;AACZ,QAAIC,KAAK,GAAG,KAAKf,KAAL,CAAWC,mBAAvB;AACA,QAAIe,OAAO,GAAG,CAAd;AACAA,IAAAA,OAAO,GAAGD,KAAK,GAAG,GAAlB;AAEA,QAAIE,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAd;AAEAC,IAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AAEA,WAAO,CAAC,MAAMA,OAAP,EAAgBJ,KAAhB,CAAsB,CAAC,CAAvB,CAAP;AACA;;AAGDO,EAAAA,UAAU,GAAG;AACZ,QAAIL,KAAK,GAAG,KAAKf,KAAL,CAAWC,mBAAvB;AACA,QAAIe,OAAO,GAAG,CAAd;AACA,QAAIK,OAAO,GAAG,CAAd;AACAL,IAAAA,OAAO,GAAGD,KAAK,GAAG,GAAlB;AACAM,IAAAA,OAAO,GAAGL,OAAO,GAAG,EAApB;AAEA,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWE,OAAX,CAAd;AAEA,WAAO,CAAC,MAAMJ,OAAP,EAAgBJ,KAAhB,CAAsB,CAAC,CAAvB,CAAP;AAEA,GA3EiC,CA6ElC;;;AACAS,EAAAA,MAAM,GAAG;AACR,WAGC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAO,MAAA,KAAK,EAAI,KAAKtB,KAAL,CAAWC,mBAA3B;AAAgD,MAAA,QAAQ,EAAI,KAAKC,WAAjE;AAA8E,MAAA,GAAG,EAAC,SAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC;AAAQ,MAAA,OAAO,EAAI,KAAKE,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKJ,KAAL,CAAWuB,IAAhB,CAHD,CAHD;AAUA;;AAzFiC;;AA6FnC,eAAe3B,IAAf","sourcesContent":["import React, {useEffect, useReducer, useRef} from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Home extends React.Component {\n\n\t// focus on start button before timer is started\n\t// once its started switch focus to stop button\n\t// redo\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// create milliSeconds\n\t\tthis.state = {milliSecondsElapsed: 0};\n\t\tthis.updateState = this.updateState.bind(this);\n\t\tthis.clearInput = this.clearInput.bind(this);\n\t\t// this.handleChange = this.handleChange.bind(this);\n\t\t// this.myRef = React.createRef();\n\t\t// this.focusRef = this.focusRef.bind(this);\n\n\t}\n\n\tupdateState(e) {\n\t\tthis.setState({milliSecondsElapsed: e.target.milliSecondsElapsed })\n\t}\n\n\t// when button is pressed will clear as 0, now need to add stopwatch and then make accesable by spacebar\n\tclearInput() {\n\t\tthis.setState({milliSecondsElapsed: 0});\n\t\tReactDOM.findDOMNode(this.refs.myInput).focus();\n\t}\n\n\t// update setState({milliSecondsElapsd: 0})\n\n\t// focusRef() {\n\t// \tthis.myRef.current.focus();\n\t// }\n\n\t// handleChange(e) {\n\t// \tthis.setState({milliSecondsElapsed: e.target.milliSecondsElapsed});\n\t// } \n\n\t// handleSubmit = e => {\n\t// \te.preventDefault();\n\n\n\t// }\n\n\tgetMilliseconds() {\n\t\treturn (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n\t}\n\n\n\t// var number = this.state.milliSecondsElapsed.toString().length;\n\tgetSeconds() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tseconds = milli / 100;\n\n\t\tvar myTrunc = Math.trunc(seconds);\n\n\t\tmyTrunc = myTrunc % 60;\n\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t}\n\n\n\tgetMinutes() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tvar minutes = 0;\n\t\tseconds = milli / 100;\n\t\tminutes = seconds / 60;\n\n\t\tvar myTrunc = Math.trunc(minutes);\n\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t\t\n\t}\n\n\t// <input value={this.state.milliSecondsElapsed} ref={this.myRef} onChange={this.handleChange} />\n\trender() {\n\t\treturn (\n\n\t\t\t\n\t\t\t<div className=\"index\">\n\t\t\t\t<input value = {this.state.milliSecondsElapsed} onChange = {this.updateState} ref=\"myInput\"></input>\n\t\t\t\t<button onClick = {this.clearInput}>CLEAR</button>\n\t\t\t\t<h4>{this.state.data}</h4>\n\t\t\t</div>\n\n\t\t);\n\t}\n\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}