{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useReducer, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Home extends React.Component {\n  // focus on start button before timer is started\n  // once its started switch focus to stop button\n  // redo\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      // g button\n      if (e.keyCode == 103) {\n        handleStart();\n      }\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      // spacebar\n      if (e.keyCode == 32) {\n        handleStop();\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      clearInterval(this.timer);\n      this.textInput.current.focus();\n    });\n\n    this.state = {\n      milliSecondsElapsed: 0\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n    this.focus = this.focus.bind(this);\n  }\n\n  onClickHandler() {\n    this.setState(currentState => ({\n      isStarted: !currentState.isStarted\n    }));\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  }\n\n  getMilliseconds() {\n    return (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n  }\n\n  getSeconds() {\n    var milli = this.state.milliSecondsElapsed;\n    var seconds = 0;\n    seconds = milli / 100;\n    var myTrunc = Math.trunc(seconds);\n    myTrunc = myTrunc % 60;\n    return (\"0\" + myTrunc).slice(-2);\n  }\n\n  getMinutes() {\n    var milli = this.state.milliSecondsElapsed;\n    var seconds = 0;\n    var minutes = 0;\n    seconds = milli / 100;\n    minutes = seconds / 60;\n    var myTrunc = Math.trunc(minutes);\n    return (\"0\" + myTrunc).slice(-2);\n  }\n\n  focus() {\n    handleStart();\n  } // componentDidMount() {\n  // \tthis.nameInput.focus();\n  // }\n\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 4\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed,\n      onChange: this.updateState,\n      ref: this.textInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }\n    }), __jsx(\"input\", {\n      type: \"button\",\n      onClick: this.focus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }\n    }, \"STOP\"));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","useEffect","useReducer","useRef","ReactDOM","Home","Component","constructor","props","clearInterval","timer","e","keyCode","handleStart","handleStop","setState","milliSecondsElapsed","setInterval","state","textInput","current","focus","updateState","bind","createRef","onClickHandler","currentState","isStarted","target","getMilliseconds","slice","getSeconds","milli","seconds","myTrunc","Math","trunc","getMinutes","minutes","render"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useRef} from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Home extends React.Component {\n\n\t// focus on start button before timer is started\n\t// once its started switch focus to stop button\n\t// redo\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {milliSecondsElapsed: 0};\n\t\tthis.updateState = this.updateState.bind(this);\n\t\tthis.textInput = React.createRef();\n\t\t\n\t\tthis.focus = this.focus.bind(this);\n\n\t}\n\n\ttextInput = () => {\n\t\tclearInterval(this.timer);\n\t}\n\n\tonClickHandler() {\n\t\tthis.setState(currentState => ({\n\t\t\tisStarted: !currentState.isStarted\n\t\t}));\n\t}\n\n\tupdateState(e) {\n\t\tthis.setState({milliSecondsElapsed: e.target.milliSecondsElapsed })\n\t}\n\n\tkeyPress = (e) => {\n\t\t// g button\n\t\tif (e.keyCode == 103) {\n\t\t\thandleStart();\n\t\t}\n\t}\n\n\tkeyPress = (e) => {\n\t\t// spacebar\n\t\tif (e.keyCode == 32) {\n\t\t\thandleStop();\n\t\t}\n\t}\n\n\tgetMilliseconds() {\n\t\treturn (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n\t}\n\n\tgetSeconds() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tseconds = milli / 100;\n\t\tvar myTrunc = Math.trunc(seconds);\n\t\tmyTrunc = myTrunc % 60;\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t}\n\n\tgetMinutes() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tvar minutes = 0;\n\t\tseconds = milli / 100;\n\t\tminutes = seconds / 60;\n\t\tvar myTrunc = Math.trunc(minutes);\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t}\n\n\thandleStart = () => {\n\t\tthis.setState({\n\t\t\tmilliSecondsElapsed: (0)\n\t\t});\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tmilliSecondsElapsed: (this.state.milliSecondsElapsed + 1)\n\t\t\t});\n\t\t}, 10)\n\t}\n\n\thandleStop = () => {\n\t\tclearInterval(this.timer);\n\t\tthis.textInput.current.focus();\n\t}\n\n\tfocus() {\n\t\thandleStart();\n\t}\n\n\t// componentDidMount() {\n\t// \tthis.nameInput.focus();\n\t// }\n\n\trender() {\n\t\treturn (\n\n\t\t\t\n\t\t\t<div className=\"index\">\n\t\t\t\t<input value = {this.state.milliSecondsElapsed} onChange = {this.updateState} ref={this.textInput}/>\n\t\t\t\t<input type=\"button\" onClick={this.focus}/>\n\t\t\t\t<button onClick = {this.handleStart}>START</button>\n\t\t\t\t<button onClick = {this.handleStop}>STOP</button>\n\t\t\t</div>\n\n\t\t);\n\t}\n\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}