{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (this.state.milliSecondsElapsed === 0) {\n          this.startBtn.click();\n        } else if (this.state.timerInProgress === false) {\n          this.startBtn.click();\n        } else {\n          this.stopBtn.click();\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      if (this.state.timerInProgress === true) return;\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, () => {\n          this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      if (this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        this.setState({\n          average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        // adds value to the total\n        total: this.state.total + this.state.milliSecondsElapsed\n      });\n      this.setState({\n        last: this.state.milliSecondsElapsed / 100\n      });\n\n      if (this.state.high < this.state.milliSecondsElapsed) {\n        // finds slowest time\n        this.setState({\n          high: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low === 0) {\n        // finds fastest time\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low > this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      this.setState( // adding the value to the array and then clearing the timer, shifting focus to start button\n      previousState => ({\n        timerInProgress: false,\n        myArray: [...previousState.myArray, // <-- shallow copy existing data\n        this.state.milliSecondsElapsed / 100 // <-- add new time\n        ]\n      }), () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      });\n\n      if (this.state.count === 1) {\n        this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      if (this.state.high > 0 && this.state.low > 0) {\n        this.setState({\n          // same thing as happening here, it isn't subtracting the last value\n          // for some reason, that isn't happening if you take out the parenthesis \n          range: (this.state.high - this.state.low).toFixed(2)\n        });\n      }\n\n      this.setState({\n        count: 1\n      }); // it makes the first value equal to the average, then averages the second value on the third run\n      // so on, so forth\n    });\n\n    this.state = {\n      myArray: [],\n      // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      range: 0,\n      timerInProgress: false // state to detect whether timer has started\n\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  }\n\n  // find the average AT EVERY GO \n  render() {\n    const myTotal = this.state.total;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 6\n      }\n    }, __jsx(\"div\", {\n      className: \"index\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 8\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed / 100,\n      onChange: this.updateState,\n      ref: this.textInput,\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 10\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 10\n      }\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.stopBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 10\n      }\n    }, \"STOP\"), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 10\n      }\n    }, this.state.milliSecondsElapsed / 100)), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, this.state.myArray.join(\"\\n \")), myTotal ? __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, \"Average: \", (this.state.total / this.state.myArray.length / 100).toFixed(2)) : __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, \"Average: 0\"), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, \"Slowest Time: \", this.state.high / 100), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    }, \"Fastest time: \", this.state.low / 100), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, \"Total: \", this.state.total), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, \"Array Length: \", this.state.myArray.length), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, \"Range: \", this.state.range));\n  }\n\n}","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","Component","Layout","Timer","constructor","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","setState","setInterval","focus","average","toFixed","total","last","high","low","previousState","myArray","count","length","range","updateState","bind","textInput","createRef","componentDidMount","window","addEventListener","keyPress","componentWillUnmount","removeEventListener","target","render","myTotal","handleStart","ref","handleStop","join"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myArray: [], // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 0, // lowest value\n      count: 0,\n      last: 0,\n      range: 0,\n      timerInProgress: false // state to detect whether timer has started\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n  \n\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n  };\n\n  handleStart = () => {\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n  handleStop = () => {\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed/100\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array and then clearing the timer, shifting focus to start button\n      (previousState) => ({\n        timerInProgress: false,\n        myArray: [\n          ...previousState.myArray, // <-- shallow copy existing data\n          this.state.milliSecondsElapsed / 100 // <-- add new time\n        ]\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }\n    if (this.state.high > 0 && this.state.low > 0) {\n      this.setState({ // same thing as happening here, it isn't subtracting the last value\n        // for some reason, that isn't happening if you take out the parenthesis \n        range: ((this.state.high - this.state.low)).toFixed(2)\n      })\n    }\n\n    this.setState({\n      count: 1\n    })\n\n\n\n    // it makes the first value equal to the average, then averages the second value on the third run\n    // so on, so forth\n    \n\n  };\n\n  // find the average AT EVERY GO \n\n  render() {\n    const myTotal = this.state.total;\n    return (\n\t    <Layout>\n\t      <div className=\"index\" align='center'>\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n        <div>{this.state.myArray.join(\"\\n \")}</div>\n        {myTotal ? (\n            <h1>Average: {(this.state.total / this.state.myArray.length / 100).toFixed(2)}</h1>\n          ) : (\n            <h1>Average: 0</h1>\n          )}\n        \n\n        <h1>Slowest Time: {this.state.high/100}</h1>\n        <h1>Fastest time: {this.state.low/100}</h1>\n        <h1>Total: {this.state.total}</h1>\n        <h1>Array Length: {this.state.myArray.length}</h1>\n        <h1>Range: {this.state.range}</h1>\n        \n      </Layout>\n\n\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}