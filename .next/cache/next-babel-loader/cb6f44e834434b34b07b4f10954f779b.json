{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (this.state.milliSecondsElapsed === 0) {\n          this.startBtn.click();\n        } else if (this.state.timerInProgress === false) {\n          this.startBtn.click();\n        } else {\n          this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        this.clearBtn.click();\n      }\n\n      if (e.keyCode === 100) {\n        this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      this.setState({\n        startTime: Date.now()\n      });\n      if (this.state.timerInProgress === true) return;\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, () => {\n          this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      // console.log(this.state.milliSecondsElapsed);\n      if (this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        this.setState({\n          average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        // adds value to the total\n        total: this.state.total + this.state.milliSecondsElapsed\n      });\n      this.setState({\n        last: this.state.milliSecondsElapsed\n      });\n\n      if (this.state.high < this.state.milliSecondsElapsed) {\n        // finds slowest time\n        this.setState({\n          high: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low === 0) {\n        // finds fastest time\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low > this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      this.setState( // adding the value to the array\n      previousState => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n        myArray: [this.state.milliSecondsElapsed / 100, // <-- add new time\n        ...previousState.myArray // <-- shallow copy existing data\n        ]\n      }), () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      });\n\n      if (this.state.count === 1) {\n        this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        count: 1\n      });\n      this.setState({\n        endTime: Date.now()\n      });\n      this.setState({\n        myOldArray: this.state.myArray\n      });\n      this.setTimes(); // console.log(this.state.milliSecondsElapsed);\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      this.setState({\n        average: 0\n      });\n      this.setState({\n        high: 0\n      });\n      this.setState({\n        low: 0\n      });\n      this.setState({\n        total: 0\n      });\n      this.setState({\n        myArray: []\n      });\n      this.setState({\n        range: 0\n      });\n      this.setTimes();\n      this.startBtn.focus();\n    });\n\n    _defineProperty(this, \"delete\", () => {\n      // should delete the last item\n      var array = this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        this.setState({\n          total: 0\n        });\n        this.setState({\n          low: 0\n        });\n        this.setState({\n          high: 0\n        });\n        this.setState({\n          myArray: []\n        });\n      } else {\n        this.setState({\n          myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        });\n        this.setState({\n          low: Math.min(...array2) * 100\n        });\n        this.setState({\n          high: Math.max(...array2) * 100\n        }); // find average\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        this.setState({\n          total: add * 100\n        });\n      }\n\n      this.setTimes();\n      this.startBtn.focus();\n    });\n\n    this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false,\n      // this becomes true when something is loaded or first number added\n      otherLoading: false\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = /*#__PURE__*/React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n    this.getTimes();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  } // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n\n\n  setTimes() {\n    let obj = this.state.myArray;\n    localStorage.setItem('myTimes', JSON.stringify(obj)); // console.log(obj);\n\n    let obj1 = this.state.low;\n    localStorage.setItem('lowTime', JSON.stringify(obj1));\n\n    if (this.state.milliSecondsElapsed / 100 > this.state.high) {\n      let obj2 = this.state.milliSecondsElapsed / 100;\n      localStorage.setItem('highTime', JSON.stringify(obj2));\n    } else {\n      let obj2 = this.state.high;\n      localStorage.setItem('highTime', JSON.stringify(obj2));\n    } // console.log(obj2);\n\n\n    let obj3 = this.state.total;\n    localStorage.setItem('totalTime', JSON.stringify(obj3)); // add obj for last time, then add that to the array\n\n    let obj4 = this.state.milliSecondsElapsed / 100;\n    localStorage.setItem('lastTime', JSON.stringify(obj4)); // console.log(obj4 + \" obj4\");\n  } // retrieve times from localStorage\n\n\n  getTimes() {\n    let data = localStorage.getItem('myTimes'); // average, doesn't include last time\n\n    data = JSON.parse(data);\n    this.setState({\n      myArray: data\n    }); // console.log(this.state.myArray);\n\n    let data1 = localStorage.getItem('lowTime'); // fastest time\n\n    data1 = JSON.parse(data1); // console.log(data1 + \" data1\");\n\n    this.setState({\n      low: data1\n    }); // console.log(this.state.low);\n\n    let data2 = localStorage.getItem('highTime'); // slowest time\n\n    data2 = JSON.parse(data2);\n    this.setState({\n      high: data2\n    });\n    let data3 = localStorage.getItem('totalTime'); // total time used with average\n    // data3 = JSON.parse(data3);\n    // this.setState({ total: data3 });\n    // console.log(data3 + \" total\");\n\n    let data4 = localStorage.getItem('lastTime'); // last time\n\n    let data5 = JSON.parse(data4) + JSON.parse(data3) / 100; // add last time with total\n    // console.log(data5 + \" last\");\n\n    this.setState({\n      last: data5 * 100\n    }); // console.log(this.state.last);\n\n    this.setState({\n      otherLoading: true\n    }); // for some reason its taking last as 0\n\n    this.setState(previousState => ({\n      myArray: [data4, ...previousState.myArray] // you can't set a variable (this.state.last) in this method and then use it here\n\n    })); // console.log(this.state.myArray);\n\n    this.setState({\n      total: data5 * 100\n    }); // console.log(this.state.myArray.length);\n\n    if (data1 > data4) {\n      // if last number is less than lowTime\n      this.setState({\n        low: data4 * 100\n      });\n    }\n\n    if (data2 < data4) {\n      // if last number is higher than highTime\n      this.setState({\n        high: data4 * 100\n      });\n    }\n  }\n  /*   {!this.state.loading && !this.state.myArray.length ? (\n     <div>\n       <button onClick={ () => this.getTimes() }>Load Times</button>\n       <p className='text'>This button will load your last times!</p>\n     </div>\n   ) : (\n     <p></p>\n   )}\n   */\n  //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n\n  render() {\n    const myTotal = this.state.total; // console.log(this.state.myArray);\n\n    return __jsx(Layout, null, __jsx(\"div\", {\n      className: \"background\",\n      style: {\n        height: 575\n      }\n    }, __jsx(\"div\", null, __jsx(\"table\", {\n      align: \"right\",\n      className: \"antTable\"\n    }, __jsx(Table, {\n      align: \"center\",\n      height: \"150px\",\n      className: \"myTable\"\n    }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", {\n      className: \"text\",\n      align: \"center\"\n    }, \"Last Time\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", {\n      className: \"text\",\n      align: \"center\"\n    }, this.state.myArray.join(\", \"))))))), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Press the \", __jsx(\"b\", null, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Press the \", __jsx(\"b\", null, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Press the \", __jsx(\"b\", null, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Lastly, write your name and then the time below \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 of your best time. Then, hit the add button to \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 add your time to the database! \"), __jsx(App, null), __jsx(\"table\", {\n      align: \"left\"\n    }, __jsx(\"div\", {\n      className: \"fixed\"\n    }, \" \", __jsx(\"img\", {\n      src: \"../static/IMG_4152.png\",\n      width: \"15%\",\n      height: \"15%\"\n    }), \" \")), __jsx(\"div\", {\n      align: \"center\",\n      className: \"center\",\n      height: \"200px\"\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed / 100,\n      onChange: this.updateState,\n      ref: this.textInput,\n      readOnly: true\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.stopBtn = ref\n    }, \"STOP\"), __jsx(\"button\", {\n      onClick: this.clear,\n      ref: ref => this.clearBtn = ref\n    }, \"CLEAR\"), __jsx(\"button\", {\n      onClick: this.delete,\n      ref: ref => this.deleteBtn = ref\n    }, \"DELETE\"), __jsx(\"h1\", null, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n      align: \"center\",\n      width: \"200px\",\n      className: \"text\"\n    }, __jsx(\"thead\", null, __jsx(\"tr\", {\n      height: \"100px\"\n    }, __jsx(\"th\", null, \"Average\"), __jsx(\"th\", null, \"Fastest\"), __jsx(\"th\", null, \"Slowest\"), __jsx(\"th\", null, \"Range\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", null, myTotal ? __jsx(\"td\", null, (this.state.total / this.state.myArray.length / 100).toFixed(2)) : __jsx(\"td\", null, \" 0 \")), __jsx(\"td\", null, this.state.low / 100), __jsx(\"td\", null, this.state.high / 100), __jsx(\"td\", null, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}