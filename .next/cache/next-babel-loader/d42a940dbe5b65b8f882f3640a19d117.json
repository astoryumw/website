{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\n/* I should write a delete last button */\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (this.state.milliSecondsElapsed === 0) {\n          this.startBtn.click();\n        } else if (this.state.timerInProgress === false) {\n          this.startBtn.click();\n        } else {\n          this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        this.clearBtn.click();\n      }\n\n      if (e.keyCode === 100) {\n        this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      if (this.state.timerInProgress === true) return;\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, () => {\n          this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      if (this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        this.setState({\n          average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        // adds value to the total\n        total: this.state.total + this.state.milliSecondsElapsed\n      });\n      this.setState({\n        last: this.state.milliSecondsElapsed\n      });\n\n      if (this.state.high < this.state.milliSecondsElapsed) {\n        // finds slowest time\n        this.setState({\n          high: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low === 0) {\n        // finds fastest time\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low > this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      this.setState( // adding the value to the array\n      previousState => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n        myArray: [this.state.milliSecondsElapsed / 100, // <-- add new time\n        ...previousState.myArray // <-- shallow copy existing data\n        ]\n      }), () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      });\n\n      if (this.state.count === 1) {\n        this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        count: 1\n      }); // it makes the first value equal to the average, then averages the second value on the third run\n      // so on, so forth\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      this.setState({\n        average: 0\n      });\n      this.setState({\n        high: 0\n      });\n      this.setState({\n        low: 0\n      });\n      this.setState({\n        total: 0\n      });\n      this.setState({\n        myArray: []\n      });\n      this.setState({\n        range: 0\n      });\n      this.startBtn.focus();\n    });\n\n    _defineProperty(this, \"delete\", () => {\n      // should delete the last item\n      this.setState({\n        total: this.state.total - this.state.last // this only deletes the actually last item from the average\n\n      });\n\n      if (this.state.milliSecondsElapsed === this.state.low) {\n        // low is fastest\n        // then need to find new low\n        this.setState({\n          low: 0\n        });\n      }\n\n      if (this.state.milliSecondsElapsed === this.state.high) {\n        // high is slowest\n        this.setState({\n          high: 0\n        });\n      }\n\n      var array = this.state.myArray;\n      var array2 = [];\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      this.setState({\n        myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n      });\n      this.setState({\n        low: Math.min(...array2) * 100\n      });\n      this.setState({\n        high: Math.max(...array2) * 100\n      });\n      this.startBtn.focus();\n    });\n\n    this.state = {\n      myArray: [],\n      // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false // state to detect whether timer has started\n\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  }\n\n  // find the average AT EVERY GO \n  // <td className=\"text\">{this.state.myArray.join(\", \")}</td> line 180\n  // \"striped bordered hover\" was using this in table but it was giving me an error\n  render() {\n    const myTotal = this.state.total;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 6\n      }\n    }, __jsx(\"div\", {\n      className: \"background\",\n      style: {\n        height: 575\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }, __jsx(Table, {\n      align: \"right\",\n      height: \"200px\",\n      width: \"200px\",\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, __jsx(\"th\", {\n      className: \"text\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, \"Last Time\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, __jsx(\"td\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, this.state.myArray.join(\", \"))))), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, \"Press the spacebar to start/stop the timer.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }\n    }, \"Press the c button to clear everything.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 7\n      }\n    }, \"Press the d button to delete the last time.\"), __jsx(\"div\", {\n      align: \"center\",\n      className: \"text\",\n      height: \"200px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 8\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed / 100,\n      onChange: this.updateState,\n      ref: this.textInput,\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 10\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 10\n      }\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.stopBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 10\n      }\n    }, \"STOP\"), __jsx(\"button\", {\n      onClick: this.clear,\n      ref: ref => this.clearBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, \"CLEAR\"), __jsx(\"button\", {\n      onClick: this.delete,\n      ref: ref => this.deleteBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }, \"DELETE\"), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 10\n      }\n    }, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n      align: \"center\",\n      width: \"200px\",\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }\n    }, __jsx(\"tr\", {\n      height: \"100px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 13\n      }\n    }, __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 15\n      }\n    }, \"Average\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 15\n      }\n    }, \"Fastest\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 15\n      }\n    }, \"Slowest\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 15\n      }\n    }, \"Range\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }, __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 15\n      }\n    }, myTotal ? __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 19\n      }\n    }, (this.state.total / this.state.myArray.length / 100).toFixed(2)) : __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 19\n      }\n    }, \" 0 \")), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    }, this.state.low / 100), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 15\n      }\n    }, this.state.high / 100), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 15\n      }\n    }, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","Component","Layout","Table","Home","constructor","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","clearBtn","deleteBtn","setState","setInterval","focus","average","toFixed","total","last","high","low","previousState","myArray","count","length","range","array","array2","u","push","splice","Math","min","max","updateState","bind","textInput","createRef","componentDidMount","window","addEventListener","keyPress","componentWillUnmount","removeEventListener","target","render","myTotal","height","join","handleStart","ref","handleStop","clear","delete"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\"\n\n/* I should write a delete last button */\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myArray: [], // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 0, // lowest value\n      count: 0,\n      last: 0, // the last element recieved\n      timerInProgress: false, // state to detect whether timer has started\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n  \n\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n    if (e.keyCode === 99) {\n      this.clearBtn.click();\n    }\n    if (e.keyCode === 100) {\n      this.deleteBtn.click();\n    }\n  };\n\n  handleStart = () => {\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n  handleStop = () => {\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array\n      (previousState) => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n       myArray: [\n          this.state.milliSecondsElapsed / 100, // <-- add new time\n          ...previousState.myArray // <-- shallow copy existing data\n        ],\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }    \n\n    this.setState({\n      count: 1\n    })\n\n\n\n    // it makes the first value equal to the average, then averages the second value on the third run\n    // so on, so forth\n    \n\n  };\n\n  clear = () => {\n    this.setState({\n      average: 0\n    })\n    this.setState({\n      high: 0\n    })\n    this.setState({\n      low: 0\n    })\n    this.setState({\n      total: 0\n    })\n    this.setState({\n      myArray: []\n    })\n    this.setState({\n      range: 0\n    })\n\n    this.startBtn.focus();\n\n  };\n\n\n  delete = () => { // should delete the last item\n    \n    this.setState({\n      total: this.state.total-this.state.last // this only deletes the actually last item from the average\n    })\n\n\n    if (this.state.milliSecondsElapsed===this.state.low) { // low is fastest\n      // then need to find new low\n      this.setState({\n        low: 0\n      })\n    }\n    if (this.state.milliSecondsElapsed===this.state.high) { // high is slowest\n      this.setState({\n        high: 0\n      })\n    }\n\n    var array=this.state.myArray;\n    var array2=[];\n    for (var u=1; u<array.length; u++) {\n      array2.push(array[u]);\n    }\n\n    this.setState({ \n      myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n    })\n\n\n    this.setState({\n      low: (Math.min(...array2)*100)\n    })\n\n    this.setState({\n      high: (Math.max(...array2)*100)\n    })\n\n\n\n\n\n\n\n\n \n\n    this.startBtn.focus();\n  };\n\n\n  // find the average AT EVERY GO \n  // <td className=\"text\">{this.state.myArray.join(\", \")}</td> line 180\n  // \"striped bordered hover\" was using this in table but it was giving me an error\n  render() {\n    const myTotal = this.state.total;\n    return (\n\t    <Layout>\n      <div className='background' style={{height:575}}>\n\n      <Table align=\"right\" height=\"200px\" width=\"200px\" className='table'>\n        <thead>\n          <tr>\n            <th className=\"text\" align=\"center\">Last Time</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            <td className=\"text\">{this.state.myArray.join(\", \")}</td>\n          </tr>\n        </tbody>\n      </Table>\n\n      <p className=\"text\" align='left'>Press the spacebar to start/stop the timer.</p>\n      <p className=\"text\" align='left'>Press the c button to clear everything.</p>\n      <p className=\"text\" align='left'>Press the d button to delete the last time.</p>\n\n\n\t      <div align='center' className=\"text\" height=\"200px\">\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\n          <button onClick={this.clear} ref={(ref) => (this.clearBtn = ref)}>\n            CLEAR \n          </button>\n\n          <button onClick={this.delete} ref={(ref) => (this.deleteBtn = ref)}>\n            DELETE\n          </button>\n\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n\n\n\n        <table align=\"center\" width=\"200px\" className=\"text\">\n          <thead>\n            <tr height=\"100px\">\n              <th>Average</th>\n              <th>Fastest</th>\n              <th>Slowest</th>\n              <th>Range</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>{myTotal ? (\n                  <td>{(this.state.total / this.state.myArray.length / 100).toFixed(2)}</td>\n                ) : (\n                  <td> 0 </td>\n                )}</td>\n              <td>{this.state.low/100}</td>\n              <td>{this.state.high/100}</td>\n              <td>{(this.state.high/100 - this.state.low/100).toFixed(2)}</td>\n            </tr>\n          </tbody>\n\n\n        </table>\n\n      </div>\n      </Layout>\n\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}