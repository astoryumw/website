{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"textInput\", function () {\n      clearInterval(_this.timer);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (_this.state.milliSecondsElapsed === 0) {\n          _this.startBtn.click();\n        } else if (_this.state.timerInProgress === false) {\n          _this.startBtn.click();\n        } else {\n          _this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        _this.clearBtn.click();\n\n        _this.setState({\n          clearMe: true\n        });\n\n        _this.setTimes();\n      }\n\n      if (e.keyCode === 100) {\n        _this.deleteBtn.click();\n\n        _this.setState({\n          deleteMe: true\n        }); // console.log(\"value of deleteMe \" + this.state.deleteMe);\n\n\n        _this.setTimes();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      _this.setState({\n        clearMe: false\n      });\n\n      _this.setState({\n        deleteMe: false\n      });\n\n      if (isNaN(_this.state.low)) {\n        _this.setState({\n          low: 0\n        });\n      }\n\n      if (isNaN(_this.state.high)) {\n        _this.setState({\n          high: 0\n        });\n      }\n\n      if (isNaN(_this.state.total)) {\n        _this.setState({\n          total: 0\n        });\n      }\n\n      _this.setState({\n        startTime: Date.now()\n      });\n\n      if (_this.state.timerInProgress === true) return;\n\n      _this.setState({\n        milliSecondsElapsed: 0\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          milliSecondsElapsed: _this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, function () {\n          _this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function () {\n      // console.log(this.state.milliSecondsElapsed);\n      if (_this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        _this.setState({\n          average: (_this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.setState({\n        // adds value to the total\n        total: _this.state.total + _this.state.milliSecondsElapsed\n      });\n\n      _this.setState({\n        last: _this.state.milliSecondsElapsed\n      });\n\n      if (_this.state.high < _this.state.milliSecondsElapsed) {\n        // finds slowest time\n        _this.setState({\n          high: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low === 0) {\n        // finds fastest time\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low > _this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      _this.setState( // adding the value to the array\n      function (previousState) {\n        return {\n          timerInProgress: false,\n          // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n          myArray: [_this.state.milliSecondsElapsed / 100].concat(_toConsumableArray(previousState.myArray))\n        };\n      }, function () {\n        clearInterval(_this.timer);\n\n        _this.startBtn.focus();\n      });\n\n      if (_this.state.count === 1) {\n        _this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (_this.state.total / _this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        count: 1\n      });\n\n      _this.setState({\n        endTime: Date.now()\n      });\n\n      _this.setState({\n        myOldArray: _this.state.myArray\n      });\n\n      _this.setState({\n        length: _this.state.length + 1\n      });\n\n      _this.setState({\n        testArray: _this.state.myArray\n      }); // console.log(this.state.length);\n\n\n      _this.setTimes(); // console.log(this.state.milliSecondsElapsed);\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clear\", function () {\n      _this.setState({\n        average: 0\n      });\n\n      _this.setState({\n        high: 0\n      });\n\n      _this.setState({\n        low: 0\n      });\n\n      _this.setState({\n        total: 0\n      });\n\n      _this.setState({\n        myArray: []\n      });\n\n      _this.setState({\n        range: 0\n      });\n\n      _this.setState({\n        length: 0\n      });\n\n      _this.setState({\n        clearMe: true\n      }); // console.log(this.state.clearMe + \"in the clear\");\n\n\n      _this.setTimes();\n\n      _this.startBtn.focus(); // console.log(\"Clear\");\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delete\", function () {\n      // should delete the last item\n      var array = _this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        _this.setState({\n          total: 0\n        });\n\n        _this.setState({\n          low: 0\n        });\n\n        _this.setState({\n          high: 0\n        });\n\n        _this.setState({\n          myArray: []\n        });\n      } else {\n        // console.log(\"the array before delete \" + this.state.myArray);\n        _this.setState({\n          myArray: _this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        }); // console.log(\"the array after delete \" + this.state.myArray);\n\n\n        _this.setState({\n          low: Math.min.apply(Math, array2) * 100\n        });\n\n        _this.setState({\n          high: Math.max.apply(Math, array2) * 100\n        }); // find average\n\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        _this.setState({\n          total: add * 100\n        });\n      }\n\n      _this.setState({\n        length: _this.state.length - 1\n      });\n\n      _this.setState({\n        deleteMe: true\n      }); // console.log(this.state.deleteMe);\n      // this.setState({\n      //   myOldArray: myOldArray\n      // })\n      // this.setTimes();\n\n\n      _this.startBtn.focus(); // console.log(this.state.myArray + \" this is myArray\");\n      // console.log(this.state.myOldArray + \" this is myOldArray\");\n      // console.log(this.state.testArray);\n      // console.log(\"Delete\");\n\n    });\n\n    _this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    _this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false,\n      // this becomes true when something is loaded or first number added\n      otherLoading: false,\n      length: 0,\n      // this is the length of the array added for load and save\n      clearMe: false,\n      // if clear make clearMe as true, if clearMe is true then setTimes as 0\n      deleteMe: false,\n      clearOnce: 0,\n      testArray: []\n    };\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n    _this.textInput = /*#__PURE__*/React.createRef();\n    _this.setTimes = _this.setTimes.bind(_assertThisInitialized(_this));\n    _this.getTimes = _this.getTimes.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"keypress\", this.keyPress);\n      this.getTimes();\n      console.log(\"Hello!\");\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(e) {\n      this.setState({\n        milliSecondsElapsed: e.target.milliSecondsElapsed\n      });\n    } // press l to load times?\n    // need a way to cancel all of these if someone is entering a time\n\n  }, {\n    key: \"setTimes\",\n    value: // for some reason after you clear and reload '0,' is there\n    function setTimes() {\n      var obj = []; // console.log(this.state.clearMe + \" clearMe\");\n\n      if (this.state.clearMe == true) {\n        obj = [];\n        localStorage.setItem('times', JSON.stringify(obj)); // console.log(obj);\n\n        var obj1 = 0;\n        localStorage.setItem('last', JSON.stringify(obj1));\n        var obj2 = 0;\n        localStorage.setItem('list', JSON.stringify(obj2));\n        var obj3 = 0;\n        localStorage.setItem('theTotal', JSON.stringify(obj3));\n        var obj4 = 0;\n        localStorage.setItem('fastest', JSON.stringify(obj4));\n        var obj5 = 0;\n        localStorage.setItem('slowest', JSON.stringify(obj5));\n        var obj6 = false;\n        localStorage.setItem('deleteMeTrue', JSON.stringify(obj6));\n      } else if (this.state.deleteMe == true) {\n        obj = this.state.myOldArray;\n        this.setState({\n          myArray: this.state.myOldArray\n        }); // console.log(this.state.myArray);\n\n        localStorage.setItem('times', JSON.stringify(obj)); // console.log(obj + \" I'm in delete me\");\n\n        var _obj = 0; // there is no last me it was deleted\n\n        localStorage.setItem('last', JSON.stringify(_obj));\n        var _obj2 = this.state.length;\n        localStorage.setItem('list', JSON.stringify(_obj2));\n        var _obj3 = this.state.total;\n        localStorage.setItem('theTotal', JSON.stringify(_obj3));\n        var _obj4 = this.state.low;\n        localStorage.setItem('fastest', JSON.stringify(_obj4)); // console.log(obj4);\n\n        var _obj5 = this.state.high;\n        localStorage.setItem('slowest', JSON.stringify(_obj5));\n        var _obj6 = true;\n        localStorage.setItem('deleteMeTrue', JSON.stringify(_obj6)); // var newTotal = 0\n        // if (isNaN(this.state.total)) {\n        //   for (var x=0; x<this.state.myOldArray.length; x++) {\n        //     newTotal = this.state.myOldArray[x];\n        //   }\n        //   obj3 = newTotal;\n        //   localStorage.setItem('theTotal', JSON.stringify(obj3));\n        // }\n      } else {\n        obj = this.state.myArray;\n        localStorage.setItem('times', JSON.stringify(obj)); // console.log(obj);\n\n        var _obj7 = this.state.milliSecondsElapsed / 100;\n\n        localStorage.setItem('last', JSON.stringify(_obj7)); // console.log(obj1);\n\n        var _obj8 = this.state.length + 1;\n\n        localStorage.setItem('list', JSON.stringify(_obj8)); // console.log(obj2 + \" setlength\");\n        // console.log(this.state.total)\n\n        var _obj9 = this.state.total + this.state.milliSecondsElapsed;\n\n        localStorage.setItem('theTotal', JSON.stringify(_obj9)); // console.log(obj3 + \" total\");\n\n        var _obj10 = this.state.low; // console.log(obj4 + \" \" + this.state.low);\n\n        var _obj11 = this.state.milliSecondsElapsed; // console.log(obj6);\n\n        localStorage.setItem('fastest', JSON.stringify(_obj11));\n\n        if (_obj10 < _obj11 && _obj10 != 0) {\n          localStorage.setItem('fastest', JSON.stringify(_obj10));\n        } // console.log(obj4 < obj6);\n\n\n        var _obj12 = this.state.high;\n        localStorage.setItem('slowest', JSON.stringify(_obj11));\n\n        if (_obj12 > _obj11) {\n          localStorage.setItem('slowest', JSON.stringify(_obj12));\n        }\n\n        _obj11 = false;\n        localStorage.setItem('deleteMeTrue', JSON.stringify(_obj11));\n      }\n\n      if (isNaN(this.state.low)) {\n        this.setState({\n          low: 0\n        });\n      }\n\n      if (isNaN(this.state.high)) {\n        this.setState({\n          high: 0\n        });\n      }\n\n      if (isNaN(this.state.total)) {\n        // console.log(this.state.myOldArray);\n        // let current=this.state.myOldArray[0];\n        // const sum = obj.map(v => v).reduce((sum, current) => sum + current, 0);\n        // console.log(sum);\n        this.setState({\n          total: 0\n        }); // console.log(this.state.total);\n\n        this.setState({\n          length: 0\n        });\n        alert(\"There was an error. Restarting Average, Fastest, Slowest, and Range.\");\n      }\n    } // retrieve times from localStorage\n\n  }, {\n    key: \"getTimes\",\n    value: function getTimes() {\n      var myTimes = localStorage.getItem('times');\n      myTimes = JSON.parse(myTimes); // this is array\n      // console.log(myTimes);\n\n      var myLast = localStorage.getItem('last');\n      myLast = JSON.parse(myLast);\n      var myList = localStorage.getItem('list');\n      myList = JSON.parse(myList);\n      var myTruth = localStorage.getItem('deleteMeTrue');\n      myTruth = JSON.parse(myTruth); // console.log(myTruth);\n      // // this for loop is what causes the program to add undefined times\n\n      if (myTimes !== null) {\n        for (var i = 1; i < myTimes.length; i++) {\n          myTimes[i] = \" \" + myTimes[i];\n        }\n      }\n\n      if (myLast !== 0) {\n        this.setState(function (previousState) {\n          return {\n            myArray: [myLast, myTimes]\n          };\n        });\n      } else if (myTruth == true) {\n        // maybe it would work by adding more items here, ehh\n        // console.log(\"I'm here\");\n        this.setState({\n          myArray: [myTimes]\n        }); // console.log(\"Hi!\");\n\n        this.setState({\n          deleteMe: false\n        });\n      } else {\n        this.setState({\n          myArray: []\n        });\n      } // console.log(myLast + \" \" + myTimes);\n\n\n      var myTotal = localStorage.getItem('theTotal');\n      myTotal = JSON.parse(myTotal); // console.log(myTotal + \" gettotal\");\n\n      this.setState({\n        total: myTotal\n      });\n      this.setState({\n        length: myList\n      }); // console.log(myList + \" getlength\");\n\n      var myFastest = localStorage.getItem('fastest');\n      myFastest = JSON.parse(myFastest); // console.log(myFastest);\n\n      this.setState({\n        low: myFastest\n      });\n      var mySlowest = localStorage.getItem('slowest');\n      mySlowest = JSON.parse(mySlowest);\n      this.setState({\n        high: mySlowest\n      }); // console.log(\"loading myarray\" + this.state.myArray);\n\n      if (this.state.myArray === \",\") {\n        this.setState({\n          myArray: []\n        });\n      }\n    } //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var myTotal = this.state.total; // console.log(this.state.myArray);\n\n      return __jsx(Layout, null, __jsx(\"div\", {\n        className: \"background\",\n        style: {\n          height: 575\n        }\n      }, __jsx(\"div\", null, __jsx(\"table\", {\n        align: \"right\",\n        className: \"antTable\"\n      }, __jsx(Table, {\n        align: \"center\",\n        height: \"150px\",\n        className: \"myTable\"\n      }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", {\n        className: \"text\",\n        align: \"center\"\n      }, \"Last Time\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", {\n        className: \"text\",\n        align: \"center\"\n      }, this.state.myArray.join(\", \"))))))), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\"\n      }, \" \\u2002 Press the \", __jsx(\"b\", null, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\"\n      }, \" \\u2002 Press the \", __jsx(\"b\", null, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\"\n      }, \" \\u2002 Press the \", __jsx(\"b\", null, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\"\n      }, \" \\u2002 Lastly, save your best time to the database\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\"\n      }, \" \\u2002 and see everyone else's!\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\"\n      }, \" \\u2002 To add your time \", __jsx(\"a\", {\n        className: \"link\",\n        href: \"http://localhost:3000/times\"\n      }, \"click here\"), \"!\"), __jsx(\"table\", {\n        align: \"center\",\n        className: \"centered\"\n      }, __jsx(\"div\", {\n        align: \"center\",\n        className: \"center\",\n        height: \"200px\"\n      }, __jsx(\"input\", {\n        value: this.state.milliSecondsElapsed / 100,\n        onChange: this.updateState,\n        ref: this.textInput,\n        readOnly: true\n      }), __jsx(\"button\", {\n        onClick: this.handleStart,\n        ref: function ref(_ref) {\n          return _this2.startBtn = _ref;\n        }\n      }, \"START\"), __jsx(\"button\", {\n        onClick: this.handleStop,\n        ref: function ref(_ref2) {\n          return _this2.stopBtn = _ref2;\n        }\n      }, \"STOP\"), __jsx(\"button\", {\n        onClick: this.clear,\n        ref: function ref(_ref3) {\n          return _this2.clearBtn = _ref3;\n        }\n      }, \"CLEAR\"), __jsx(\"button\", {\n        onClick: this[\"delete\"],\n        ref: function ref(_ref4) {\n          return _this2.deleteBtn = _ref4;\n        }\n      }, \"DELETE\"), __jsx(\"h1\", null, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n        align: \"center\",\n        width: \"200px\",\n        className: \"text\"\n      }, __jsx(\"thead\", null, __jsx(\"tr\", {\n        height: \"100px\"\n      }, __jsx(\"th\", null, \"Average\"), __jsx(\"th\", null, \"Fastest\"), __jsx(\"th\", null, \"Slowest\"), __jsx(\"th\", null, \"Range\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", null, myTotal ? __jsx(\"td\", null, (this.state.total / this.state.length / 100).toFixed(2)) : __jsx(\"td\", null, \" 0 \")), __jsx(\"td\", null, this.state.low / 100), __jsx(\"td\", null, this.state.high / 100), __jsx(\"td\", null, (this.state.high / 100 - this.state.low / 100).toFixed(2))))))));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":null,"metadata":{},"sourceType":"module"}