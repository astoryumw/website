{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Austin/NewWebsite/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\nimport ls from 'local-storage';\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"textInput\", function () {\n      clearInterval(_this.timer);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (_this.state.milliSecondsElapsed === 0) {\n          _this.startBtn.click();\n        } else if (_this.state.timerInProgress === false) {\n          _this.startBtn.click();\n        } else {\n          _this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        _this.clearBtn.click();\n      }\n\n      if (e.keyCode === 100) {\n        _this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      _this.setState({\n        startTime: Date.now()\n      });\n\n      if (_this.state.timerInProgress === true) return;\n\n      _this.setState({\n        milliSecondsElapsed: 0\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          milliSecondsElapsed: _this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, function () {\n          _this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function () {\n      if (_this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        _this.setState({\n          average: (_this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        // adds value to the total\n        total: _this.state.total + _this.state.milliSecondsElapsed\n      });\n\n      _this.setState({\n        last: _this.state.milliSecondsElapsed\n      });\n\n      if (_this.state.high < _this.state.milliSecondsElapsed) {\n        // finds slowest time\n        _this.setState({\n          high: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low === 0) {\n        // finds fastest time\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low > _this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      _this.setState( // adding the value to the array\n      function (previousState) {\n        return {\n          timerInProgress: false,\n          // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n          myArray: [_this.state.milliSecondsElapsed / 100].concat(_toConsumableArray(previousState.myArray))\n        };\n      }, function () {\n        clearInterval(_this.timer);\n\n        _this.startBtn.focus();\n      });\n\n      if (_this.state.count === 1) {\n        _this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (_this.state.total / _this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        count: 1\n      });\n\n      _this.setState({\n        endTime: Date.now()\n      });\n\n      _this.setState({\n        myOldArray: _this.state.myArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clear\", function () {\n      _this.setState({\n        average: 0\n      });\n\n      _this.setState({\n        high: 0\n      });\n\n      _this.setState({\n        low: 0\n      });\n\n      _this.setState({\n        total: 0\n      });\n\n      _this.setState({\n        myArray: []\n      });\n\n      _this.setState({\n        range: 0\n      });\n\n      _this.startBtn.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delete\", function () {\n      // should delete the last item\n      var array = _this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        _this.setState({\n          total: 0\n        });\n\n        _this.setState({\n          low: 0\n        });\n\n        _this.setState({\n          high: 0\n        });\n\n        _this.setState({\n          myArray: []\n        });\n      } else {\n        _this.setState({\n          myArray: _this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        });\n\n        _this.setState({\n          low: Math.min.apply(Math, array2) * 100\n        });\n\n        _this.setState({\n          high: Math.max.apply(Math, array2) * 100\n        }); // find average\n\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        _this.setState({\n          total: add * 100\n        });\n      }\n\n      _this.startBtn.focus();\n    });\n\n    _this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    _this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0\n    };\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n    _this.textInput = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(e) {\n      this.setState({\n        milliSecondsElapsed: e.target.milliSecondsElapsed\n      });\n    }\n  }, {\n    key: \"render\",\n    value: //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n    function render() {\n      var _this2 = this;\n\n      var myTotal = this.state.total;\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: \"background\",\n        style: {\n          height: 575\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 7\n        }\n      }, __jsx(Table, {\n        align: \"right\",\n        height: \"200px\",\n        width: \"200px\",\n        className: \"table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 7\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }\n      }, __jsx(\"th\", {\n        className: \"text\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }\n      }, \"Last Time\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }\n      }, __jsx(\"td\", {\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }\n      }, this.state.myArray.join(\", \"))))), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 58\n        }\n      }, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 58\n        }\n      }, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 58\n        }\n      }, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Lastly, write your name and then the time below \"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 7\n        }\n      }, \" \\u2002 of your best time. Then, hit the add button to \"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 7\n        }\n      }, \" \\u2002 add your time to the database! \"), __jsx(App, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 7\n        }\n      }), __jsx(\"div\", {\n        className: \"fixed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 7\n        }\n      }, \" \", __jsx(\"img\", {\n        src: \"../static/IMG_4152.png\",\n        align: \"left\",\n        width: \"20%\",\n        height: \"240\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 31\n        }\n      }), \" \"), __jsx(\"div\", {\n        align: \"center\",\n        className: \"center\",\n        height: \"200px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 8\n        }\n      }, __jsx(\"input\", {\n        value: this.state.milliSecondsElapsed / 100,\n        onChange: this.updateState,\n        ref: this.textInput,\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 10\n        }\n      }), __jsx(\"button\", {\n        onClick: this.handleStart,\n        ref: function ref(_ref) {\n          return _this2.startBtn = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 10\n        }\n      }, \"START\"), __jsx(\"button\", {\n        onClick: this.handleStop,\n        ref: function ref(_ref2) {\n          return _this2.stopBtn = _ref2;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 10\n        }\n      }, \"STOP\"), __jsx(\"button\", {\n        onClick: this.clear,\n        ref: function ref(_ref3) {\n          return _this2.clearBtn = _ref3;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }\n      }, \"CLEAR\"), __jsx(\"button\", {\n        onClick: this[\"delete\"],\n        ref: function ref(_ref4) {\n          return _this2.deleteBtn = _ref4;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }\n      }, \"DELETE\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 10\n        }\n      }, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n        align: \"center\",\n        width: \"200px\",\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        height: \"100px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }\n      }, __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }, \"Average\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }\n      }, \"Fastest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }\n      }, \"Slowest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }\n      }, \"Range\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }\n      }, myTotal ? __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 19\n        }\n      }, (this.state.total / this.state.myArray.length / 100).toFixed(2)) : __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 19\n        }\n      }, \" 0 \")), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }\n      }, this.state.low / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }\n      }, this.state.high / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }\n      }, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/Users/Austin/NewWebsite/website/pages/index.js"],"names":["React","Component","Layout","Table","addTime","App","ls","Home","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","clearBtn","deleteBtn","setState","startTime","Date","now","setInterval","focus","average","toFixed","total","last","high","low","previousState","myArray","count","length","endTime","myOldArray","range","array","array2","add","u","push","splice","Math","min","max","i","name","updateState","bind","textInput","createRef","window","addEventListener","keyPress","removeEventListener","target","myTotal","height","join","handleStart","ref","handleStop","clear"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\"\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\nimport ls from 'local-storage';\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name:\"...\"};\n    // this.state = {difference: 0};\n    this.state = {\n      myArray: [], // <- add initial empty array\n      myOldArray: [], // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 0, // lowest value\n      count: 0,\n      last: 0, // the last element recieved\n      timerInProgress: false, // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n\n\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n    if (e.keyCode === 99) {\n      this.clearBtn.click();\n    }\n    if (e.keyCode === 100) {\n      this.deleteBtn.click();\n    }\n  };\n\n  handleStart = () => {\n\n    this.setState({\n      startTime: Date.now()\n    })\n\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n\n  handleStop = () => {\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array\n      (previousState) => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n       myArray: [\n          this.state.milliSecondsElapsed / 100, // <-- add new time\n          ...previousState.myArray // <-- shallow copy existing data\n        ],\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }    \n\n    this.setState({\n      count: 1\n    })\n\n    this.setState({\n      endTime: Date.now()\n    })\n\n    this.setState({\n      myOldArray: this.state.myArray\n    })\n\n  };\n\n  clear = () => {\n    this.setState({\n      average: 0\n    })\n    this.setState({\n      high: 0\n    })\n    this.setState({\n      low: 0\n    })\n    this.setState({\n      total: 0\n    })\n    this.setState({\n      myArray: []\n    })\n    this.setState({\n      range: 0\n    })\n\n    this.startBtn.focus();\n\n  };\n\n\n  delete = () => { // should delete the last item\n    \n    var array=this.state.myArray;\n    var array2=[];\n\n    var last = array[0]\n    var add=0;\n\n    // if array2 is empty - get rid of things saying infinity\n\n\n\n\n    for (var u=1; u<array.length; u++) {\n      array2.push(array[u]);\n    }\n\n    if (array2.length == 0) {\n      this.setState({\n        total: 0\n      })\n      this.setState({\n        low: 0\n      })\n      this.setState({\n        high: 0\n      })\n      this.setState({\n        myArray: []\n      })\n    } else {\n      this.setState({ \n        myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n      })\n      this.setState({\n        low: (Math.min(...array2)*100)\n      })\n      this.setState({\n        high: (Math.max(...array2)*100)\n      })\n      // find average\n      for (var i=0; i<array2.length; i++) {\n        add = add + array2[i];\n      }\n      this.setState({\n        total: add*100\n      })\n    }\n    this.startBtn.focus();\n  };\n\n\n\n//       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  render() {\n    const myTotal = this.state.total;\n    return (\n\t    <Layout>\n      <div className='background' style={{height:575}}>\n\n      <Table align=\"right\" height=\"200px\" width=\"200px\" className='table'>\n        <thead>\n          <tr>\n            <th className=\"text\" align=\"center\">Last Time</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            <td className=\"text\">{this.state.myArray.join(\", \")}</td>\n          </tr>\n        </tbody>\n      </Table>\n\n      <p className=\"text\" align='left'> &ensp; Press the <b>spacebar</b> to start/stop the timer.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>c</b> button to clear everything.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>d</b> button to delete the last time.</p>\n      <p className=\"text\" align='left'> &ensp; Lastly, write your name and then the time below </p>\n      <p className=\"text\" align='left'> &ensp; of your best time. Then, hit the add button to </p>\n      <p className=\"text\" align='left'> &ensp; add your time to the database! </p>\n      <App />\n\n\n      <div className=\"fixed\"> <img src=\"../static/IMG_4152.png\" align='left' width='20%' height='240' /> </div>\n\n\n\t      <div align='center' className=\"center\" height=\"200px\">\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\n          <button onClick={this.clear} ref={(ref) => (this.clearBtn = ref)}>\n            CLEAR \n          </button>\n\n          <button onClick={this.delete} ref={(ref) => (this.deleteBtn = ref)}>\n            DELETE\n          </button>\n\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n\n\n\n        <table align=\"center\" width=\"200px\" className=\"text\">\n          <thead>\n            <tr height=\"100px\">\n              <th>Average</th>\n              <th>Fastest</th>\n              <th>Slowest</th>\n              <th>Range</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>{myTotal ? (\n                  <td>{(this.state.total / this.state.myArray.length / 100).toFixed(2)}</td>\n                ) : (\n                  <td> 0 </td>\n                )}</td>\n              <td>{this.state.low/100}</td>\n              <td>{this.state.high/100}</td>\n              <td>{(this.state.high/100 - this.state.low/100).toFixed(2)}</td>\n            </tr>\n          </tbody>\n\n\n        </table>\n\n      </div>\n\n\n\n      </Layout>\n\n\n    );\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}