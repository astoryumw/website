{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/NewWebsite/website/lib/PopupApp.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Popup from '../components/popup';\n\nfunction PopupApp() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1]; // const [hasSeen, setHasSeen] = useState(false); maybe call this on index\n\n\n  var componentDidMount = function componentDidMount() {\n    _this.togglePopup();\n  };\n\n  var togglePopup = function togglePopup() {\n    setIsOpen(!isOpen);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  }, __jsx(\"input\", {\n    type: \"button\",\n    value: \"Click to Open Popup\",\n    onClick: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }), isOpen && __jsx(Popup, {\n    content: __jsx(React.Fragment, null, __jsx(\"b\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, \"Design your Popup\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, \" \\u2002 This website allows users to time themselves when solving the Rubik's cube. To start the stopwatch, press the start button or the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 178\n      }\n    }, \"spacebar\"), \" button. To stop the stopwatch, press the stop button or the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 254\n      }\n    }, \"spacebar\"), \". The timer restarts at 0 every time the program is run and each old time will be added to the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 364\n      }\n    }, \"Last Time\"), \" box. To clear all times, press the clear button or the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 436\n      }\n    }, \"c\"), \" button. To delete the last time, press the delete button or the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 509\n      }\n    }, \"d\"), \" button. The program will find the average of all the times, the fastest time, the slowest time and the range between the two. If you leave the site, your times will be saved and they will load the next time you visit.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, \" \\u2002 To add your time \", __jsx(\"a\", {\n      className: \"link\",\n      href: \"http://www.acubestory.com/times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 65\n      }\n    }, \"click here\"), \"!\"), __jsx(\"button\", {\n      onClick: togglePopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, \"Close\")),\n    handleClose: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 16\n    }\n  }));\n}\n\n_s(PopupApp, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n\n_c = PopupApp;\nexport default PopupApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopupApp\");","map":{"version":3,"sources":["/Users/Austin/NewWebsite/website/lib/PopupApp.js"],"names":["React","useState","Popup","PopupApp","isOpen","setIsOpen","componentDidMount","togglePopup"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAAA;;AAAA,kBACUF,QAAQ,CAAC,KAAD,CADlB;AAAA,MACXG,MADW;AAAA,MACHC,SADG,iBAElB;;;AAEA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,IAAA,KAAI,CAACC,WAAL;AACD,GAFD;;AAIA,MAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBF,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAFD;;AAIA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEL;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,qBAA3B;AAAiD,IAAA,OAAO,EAAEG,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFK,EAKJH,MAAM,IAAI,MAAC,KAAD;AACT,IAAA,OAAO,EAAE,4BACP;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADO,EAET;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,MAAA,KAAK,EAAC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qJAA2K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3K,mEAAuP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAvP,qGAAqW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAArW,8DAA6a;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA7a,uEAAsf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAtf,+NAFS,EAGT;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,MAAA,KAAK,EAAC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA0D;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,MAAA,IAAI,EAAC,iCAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA1D,MAHS,EAIP;AAAQ,MAAA,OAAO,EAAEG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJO,CADA;AAOT,IAAA,WAAW,EAAEA,WAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALN,CAAP;AAeD;;GA3BQJ,Q;;KAAAA,Q;AA6BT,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport Popup from '../components/popup';\n \nfunction PopupApp() {\n  const [isOpen, setIsOpen] = useState(false);\n  // const [hasSeen, setHasSeen] = useState(false); maybe call this on index\n\n  const componentDidMount = () => {\n    this.togglePopup();\n  }\n \n  const togglePopup = () => {\n    setIsOpen(!isOpen);\n  }\n\n  return <div>\n\n    <input type=\"button\" value=\"Click to Open Popup\" onClick={togglePopup} />\n\n\n    {isOpen && <Popup\n      content={<>\n        <b className='text'>Design your Popup</b>\n      <p className=\"text\" align='left'> &ensp; This website allows users to time themselves when solving the Rubik's cube. To start the stopwatch, press the start button or the <b>spacebar</b> button. To stop the stopwatch, press the stop button or the <b>spacebar</b>. The timer restarts at 0 every time the program is run and each old time will be added to the <b>Last Time</b> box. To clear all times, press the clear button or the <b>c</b> button. To delete the last time, press the delete button or the <b>d</b> button. The program will find the average of all the times, the fastest time, the slowest time and the range between the two. If you leave the site, your times will be saved and they will load the next time you visit.</p>\n      <p className=\"text\" align='left'> &ensp; To add your time <a className=\"link\" href=\"http://www.acubestory.com/times\">click here</a>!</p>\n        <button onClick={togglePopup}>Close</button>\n      </>}\n      handleClose={togglePopup}\n    />}\n  </div>\n}\n \nexport default PopupApp;"]},"metadata":{},"sourceType":"module"}