{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/NewWebsite/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (this.state.milliSecondsElapsed === 0) {\n          this.startBtn.click();\n        } else if (this.state.timerInProgress === false) {\n          this.startBtn.click();\n        } else {\n          this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        this.clearBtn.click();\n      }\n\n      if (e.keyCode === 100) {\n        this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      this.setState({\n        startTime: Date.now()\n      });\n      if (this.state.timerInProgress === true) return;\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, () => {\n          this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      console.log(this.state.milliSecondsElapsed);\n\n      if (this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        this.setState({\n          average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        // adds value to the total\n        total: this.state.total + this.state.milliSecondsElapsed\n      });\n      this.setState({\n        last: this.state.milliSecondsElapsed\n      });\n\n      if (this.state.high < this.state.milliSecondsElapsed) {\n        // finds slowest time\n        this.setState({\n          high: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low === 0) {\n        // finds fastest time\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low > this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      this.setState( // adding the value to the array\n      previousState => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n        myArray: [this.state.milliSecondsElapsed / 100, // <-- add new time\n        ...previousState.myArray // <-- shallow copy existing data\n        ]\n      }), () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      });\n\n      if (this.state.count === 1) {\n        this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        count: 1\n      });\n      this.setState({\n        endTime: Date.now()\n      });\n      this.setState({\n        myOldArray: this.state.myArray\n      });\n      this.setTimes(); // console.log(this.state.milliSecondsElapsed);\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      this.setState({\n        average: 0\n      });\n      this.setState({\n        high: 0\n      });\n      this.setState({\n        low: 0\n      });\n      this.setState({\n        total: 0\n      });\n      this.setState({\n        myArray: []\n      });\n      this.setState({\n        range: 0\n      });\n      this.setTimes();\n      this.startBtn.focus();\n    });\n\n    _defineProperty(this, \"delete\", () => {\n      // should delete the last item\n      var array = this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        this.setState({\n          total: 0\n        });\n        this.setState({\n          low: 0\n        });\n        this.setState({\n          high: 0\n        });\n        this.setState({\n          myArray: []\n        });\n      } else {\n        this.setState({\n          myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        });\n        this.setState({\n          low: Math.min(...array2) * 100\n        });\n        this.setState({\n          high: Math.max(...array2) * 100\n        }); // find average\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        this.setState({\n          total: add * 100\n        });\n      }\n\n      this.setTimes();\n      this.startBtn.focus();\n    });\n\n    _defineProperty(this, \"loadMe\", () => {\n      if (!this.state.loading) {\n        this.getTimes();\n        this.setState({\n          loading: true\n        });\n      }\n    });\n\n    this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false,\n      // this becomes true when something is loaded or first number added\n      otherLoading: false\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = /*#__PURE__*/React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  } // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n\n\n  setTimes() {\n    let obj = this.state.myArray;\n    localStorage.setItem('myTimes', JSON.stringify(obj)); // console.log(obj);\n\n    let obj1 = this.state.low;\n    localStorage.setItem('lowTime', JSON.stringify(obj1));\n    let obj2 = this.state.high;\n    localStorage.setItem('highTime', JSON.stringify(obj2)); // console.log(obj2);\n\n    let obj3 = this.state.total;\n    localStorage.setItem('totalTime', JSON.stringify(obj3)); // add obj for last time, then add that to the array\n\n    let obj4 = this.state.last;\n    localStorage.setItem('lastTime', JSON.stringify(obj4));\n    console.log(obj4);\n    console.log(this.state.myArray);\n    console.log(this.state.last);\n    console.log(this.state.milliSecondsElapsed);\n  }\n\n  getTimes() {\n    let data = localStorage.getItem('myTimes');\n    data = JSON.parse(data);\n    this.setState({\n      myArray: data\n    });\n    let data1 = localStorage.getItem('lowTime');\n    data1 = JSON.parse(data1);\n    this.setState({\n      low: data1\n    });\n    let data2 = localStorage.getItem('highTime');\n    data2 = JSON.parse(data2);\n    this.setState({\n      high: data2\n    });\n    let data3 = localStorage.getItem('totalTime');\n    data3 = JSON.parse(data3);\n    this.setState({\n      total: data3\n    });\n    let data4 = localStorage.getItem('lastTime');\n    data4 = JSON.parse(data4);\n    this.setState({\n      last: data4\n    });\n    console.log(this.state.last);\n    this.setState({\n      otherLoading: true\n    }); // for some reason its taking last as 0\n\n    this.setState(previousState => ({\n      myArray: [this.state.last, ...previousState.myArray]\n    }));\n  }\n\n  // <button onClick={ () => this.getTimes() }>Load Times</button>\n  // <button onClick={ () => this.setTimes() }>Save Times</button>\n  // if myArray.length === 0 and getTimes !== [empty] \n  // {!this.state.loading ? (\n  //   <p>{this.getTimes}</p>\n  // ) : (\n  //   console.log(\"skip\")\n  // )}\n  //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n  render() {\n    const myTotal = this.state.total;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 6\n      }\n    }, __jsx(\"div\", {\n      className: \"background\",\n      style: {\n        height: 575\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }\n    }, __jsx(\"table\", {\n      align: \"right\",\n      className: \"antTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 7\n      }\n    }, __jsx(Table, {\n      align: \"center\",\n      height: \"150px\",\n      className: \"myTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 7\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }\n    }, __jsx(\"th\", {\n      className: \"text\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }\n    }, \"Last Time\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }\n    }, __jsx(\"td\", {\n      className: \"text\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, this.state.myArray.join(\", \"))))), !this.state.loading && !this.state.myArray.length ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }\n    }, __jsx(\"button\", {\n      onClick: () => this.getTimes(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }\n    }, \"Load Times\"), __jsx(\"p\", {\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }\n    }, \"This button will load your last times!\")) : __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }\n    }))), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Press the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 58\n      }\n    }, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Press the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 58\n      }\n    }, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Press the \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 58\n      }\n    }, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 7\n      }\n    }, \" \\u2002 Lastly, write your name and then the time below \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 7\n      }\n    }, \" \\u2002 of your best time. Then, hit the add button to \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 7\n      }\n    }, \" \\u2002 add your time to the database! \"), __jsx(App, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      className: \"fixed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 7\n      }\n    }, \" \", __jsx(\"img\", {\n      src: \"../static/IMG_4152.png\",\n      align: \"left\",\n      width: \"20%\",\n      height: \"240\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 31\n      }\n    }), \" \"), __jsx(\"div\", {\n      align: \"center\",\n      className: \"center\",\n      height: \"200px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 8\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed / 100,\n      onChange: this.updateState,\n      ref: this.textInput,\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 10\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 10\n      }\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.stopBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 10\n      }\n    }, \"STOP\"), __jsx(\"button\", {\n      onClick: this.clear,\n      ref: ref => this.clearBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }\n    }, \"CLEAR\"), __jsx(\"button\", {\n      onClick: this.delete,\n      ref: ref => this.deleteBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }\n    }, \"DELETE\"), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 10\n      }\n    }, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n      align: \"center\",\n      width: \"200px\",\n      className: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }\n    }, __jsx(\"tr\", {\n      height: \"100px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 13\n      }\n    }, __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }\n    }, \"Average\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 15\n      }\n    }, \"Fastest\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 15\n      }\n    }, \"Slowest\"), __jsx(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 15\n      }\n    }, \"Range\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 13\n      }\n    }, __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 15\n      }\n    }, myTotal ? __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 19\n      }\n    }, (this.state.total / this.state.myArray.length / 100).toFixed(2)) : __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 19\n      }\n    }, \" 0 \")), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 15\n      }\n    }, this.state.low / 100), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 15\n      }\n    }, this.state.high / 100), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 15\n      }\n    }, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Austin/NewWebsite/website/pages/index.js"],"names":["React","Component","Layout","Table","addTime","App","Home","constructor","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","clearBtn","deleteBtn","setState","startTime","Date","now","setInterval","focus","console","log","average","toFixed","loading","total","last","high","low","previousState","myArray","count","length","endTime","myOldArray","setTimes","range","array","array2","add","u","push","splice","Math","min","max","i","getTimes","name","otherLoading","updateState","bind","textInput","createRef","componentDidMount","window","addEventListener","keyPress","componentWillUnmount","removeEventListener","target","obj","localStorage","setItem","JSON","stringify","obj1","obj2","obj3","obj4","data","getItem","parse","data1","data2","data3","data4","render","myTotal","height","join","handleStart","ref","handleStop","clear","delete"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\"\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name:\"...\"};\n    // this.state = {difference: 0};\n    this.state = {\n      myArray: [], // <- add initial empty array\n      myOldArray: [], // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 0, // lowest value\n      count: 0,\n      last: 0, // the last element recieved\n      timerInProgress: false, // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false, // this becomes true when something is loaded or first number added\n      otherLoading: false,\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n\n\n  // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n    if (e.keyCode === 99) {\n      this.clearBtn.click();\n    }\n    if (e.keyCode === 100) {\n      this.deleteBtn.click();\n    }\n  };\n\n  handleStart = () => {\n\n    this.setState({\n      startTime: Date.now()\n    })\n\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n\n  handleStop = () => {\n    console.log(this.state.milliSecondsElapsed);\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n\n    this.setState({ loading: true });\n\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array\n      (previousState) => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n       myArray: [\n          this.state.milliSecondsElapsed / 100, // <-- add new time\n          ...previousState.myArray // <-- shallow copy existing data\n        ],\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }    \n\n    this.setState({\n      count: 1\n    })\n\n    this.setState({\n      endTime: Date.now()\n    })\n\n    this.setState({\n      myOldArray: this.state.myArray\n    })\n\n    this.setTimes();\n    // console.log(this.state.milliSecondsElapsed);\n\n  };\n\n  clear = () => {\n    this.setState({\n      average: 0\n    })\n    this.setState({\n      high: 0\n    })\n    this.setState({\n      low: 0\n    })\n    this.setState({\n      total: 0\n    })\n    this.setState({\n      myArray: []\n    })\n    this.setState({\n      range: 0\n    })\n    this.setTimes();\n    this.startBtn.focus();\n\n    \n\n  };\n\n\n  delete = () => { // should delete the last item\n    \n    var array=this.state.myArray;\n    var array2=[];\n\n    var last = array[0]\n    var add=0;\n\n    // if array2 is empty - get rid of things saying infinity\n\n    for (var u=1; u<array.length; u++) {\n      array2.push(array[u]);\n    }\n\n    if (array2.length == 0) {\n      this.setState({\n        total: 0\n      })\n      this.setState({\n        low: 0\n      })\n      this.setState({\n        high: 0\n      })\n      this.setState({\n        myArray: []\n      })\n    } else {\n      this.setState({ \n        myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n      })\n      this.setState({\n        low: (Math.min(...array2)*100)\n      })\n      this.setState({\n        high: (Math.max(...array2)*100)\n      })\n      // find average\n      for (var i=0; i<array2.length; i++) {\n        add = add + array2[i];\n      }\n      this.setState({\n        total: add*100\n      })\n    }\n    this.setTimes();\n    this.startBtn.focus();\n  };\n\n  setTimes() {\n    let obj = this.state.myArray;\n    localStorage.setItem('myTimes', JSON.stringify(obj));\n    // console.log(obj);\n    let obj1 = this.state.low;\n    localStorage.setItem('lowTime', JSON.stringify(obj1));\n\n    let obj2 = this.state.high;\n    localStorage.setItem('highTime', JSON.stringify(obj2));\n    // console.log(obj2);\n    let obj3 = this.state.total;\n    localStorage.setItem('totalTime', JSON.stringify(obj3));\n\n    // add obj for last time, then add that to the array\n    let obj4 = this.state.last;\n    localStorage.setItem('lastTime', JSON.stringify(obj4));\n    console.log(obj4);\n    console.log(this.state.myArray);\n    console.log(this.state.last);\n    console.log(this.state.milliSecondsElapsed);\n  }\n\n  getTimes() {\n    let data = localStorage.getItem('myTimes');\n    data = JSON.parse(data);\n    this.setState({ myArray: data });\n\n    let data1 = localStorage.getItem('lowTime');\n    data1 = JSON.parse(data1);\n    this.setState({ low: data1 });\n\n    let data2 = localStorage.getItem('highTime');\n    data2 = JSON.parse(data2);\n    this.setState({ high: data2 });\n\n    let data3 = localStorage.getItem('totalTime');\n    data3 = JSON.parse(data3);\n    this.setState({ total: data3 });\n\n    let data4 = localStorage.getItem('lastTime');\n    data4 = JSON.parse(data4);\n    this.setState({ last: data4 });\n    console.log(this.state.last);\n\n    this.setState({ otherLoading: true });\n\n    // for some reason its taking last as 0\n    this.setState(previousState => ({\n      myArray: [this.state.last, ...previousState.myArray ]\n    }));\n\n\n\n\n  }\n\n  loadMe = () => {\n    if (!this.state.loading) {\n      this.getTimes();\n      this.setState({ loading: true });\n    }\n  }\n\n  // <button onClick={ () => this.getTimes() }>Load Times</button>\n  // <button onClick={ () => this.setTimes() }>Save Times</button>\n\n  // if myArray.length === 0 and getTimes !== [empty] \n\n        // {!this.state.loading ? (\n      //   <p>{this.getTimes}</p>\n      // ) : (\n      //   console.log(\"skip\")\n      // )}\n\n\n\n//       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  render() {\n    const myTotal = this.state.total;\n    return (\n\t    <Layout>\n      <div className='background' style={{height:575}}>\n\n\n\n      <div>\n      <table align=\"right\" className='antTable'>\n      <Table align=\"center\" height=\"150px\" className='myTable'>\n        <thead>\n          <tr>\n            <th className=\"text\" align=\"center\">Last Time</th>\n          \n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n                <td className=\"text\" align=\"center\">{this.state.myArray.join(\", \")}</td>  \n            \n          </tr>\n        </tbody>\n\n      </Table>\n      {!this.state.loading && !this.state.myArray.length ? (\n        <div>\n          <button onClick={ () => this.getTimes() }>Load Times</button>\n          <p className='text'>This button will load your last times!</p>\n        </div>\n      ) : (\n        <p></p>\n      )}\n        \n      \n      </table>\n      </div>\n\n      <p className=\"text\" align='left'> &ensp; Press the <b>spacebar</b> to start/stop the timer.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>c</b> button to clear everything.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>d</b> button to delete the last time.</p>\n      <p className=\"text\" align='left'> &ensp; Lastly, write your name and then the time below </p>\n      <p className=\"text\" align='left'> &ensp; of your best time. Then, hit the add button to </p>\n      <p className=\"text\" align='left'> &ensp; add your time to the database! </p>\n      <App />\n\n\n\n      <div className=\"fixed\"> <img src=\"../static/IMG_4152.png\" align='left' width='20%' height='240' /> </div>\n\n\n\t      <div align='center' className=\"center\" height=\"200px\">\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\n          <button onClick={this.clear} ref={(ref) => (this.clearBtn = ref)}>\n            CLEAR \n          </button>\n\n          <button onClick={this.delete} ref={(ref) => (this.deleteBtn = ref)}>\n            DELETE\n          </button>\n\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n\n\n\n        <table align=\"center\" width=\"200px\" className=\"text\">\n          <thead>\n            <tr height=\"100px\">\n              <th>Average</th>\n              <th>Fastest</th>\n              <th>Slowest</th>\n              <th>Range</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>{myTotal ? (\n                  <td>{(this.state.total / this.state.myArray.length / 100).toFixed(2)}</td>\n                ) : (\n                  <td> 0 </td>\n                )}</td>\n              <td>{this.state.low/100}</td>\n              <td>{this.state.high/100}</td>\n              <td>{(this.state.high/100 - this.state.low/100).toFixed(2)}</td>\n            </tr>\n          </tbody>\n         </table>\n\n      </div>\n\n\n\n      </Layout>\n\n\n    );\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}