{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (this.state.milliSecondsElapsed === 0) {\n          this.startBtn.click();\n        } else if (this.state.timerInProgress === false) {\n          this.startBtn.click();\n        } else {\n          this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        this.clearBtn.click();\n        this.setState({\n          clearMe: true\n        });\n        this.setTimes();\n      }\n\n      if (e.keyCode === 100) {\n        this.deleteBtn.click();\n        this.setState({\n          deleteMe: true\n        }); // console.log(\"value of deleteMe \" + this.state.deleteMe);\n\n        this.setTimes();\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      this.setState({\n        clearMe: false\n      });\n      this.setState({\n        deleteMe: false\n      });\n\n      if (isNaN(this.state.low)) {\n        this.setState({\n          low: 0\n        });\n      }\n\n      if (isNaN(this.state.high)) {\n        this.setState({\n          high: 0\n        });\n      }\n\n      if (isNaN(this.state.total)) {\n        this.setState({\n          total: 0\n        });\n      }\n\n      this.setState({\n        startTime: Date.now()\n      });\n      if (this.state.timerInProgress === true) return;\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, () => {\n          this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      // console.log(this.state.milliSecondsElapsed);\n      if (this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        this.setState({\n          average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        // adds value to the total\n        total: this.state.total + this.state.milliSecondsElapsed\n      });\n      this.setState({\n        last: this.state.milliSecondsElapsed\n      });\n\n      if (this.state.high < this.state.milliSecondsElapsed) {\n        // finds slowest time\n        this.setState({\n          high: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low === 0) {\n        // finds fastest time\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low > this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      this.setState( // adding the value to the array\n      previousState => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n        myArray: [this.state.milliSecondsElapsed / 100, // <-- add new time\n        ...previousState.myArray // <-- shallow copy existing data\n        ]\n      }), () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      });\n\n      if (this.state.count === 1) {\n        this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      this.setState({\n        count: 1\n      });\n      this.setState({\n        endTime: Date.now()\n      });\n      this.setState({\n        myOldArray: this.state.myArray\n      });\n      this.setState({\n        length: this.state.length + 1\n      });\n      this.setState({\n        testArray: this.state.myArray\n      }); // console.log(this.state.length);\n\n      this.setTimes(); // console.log(this.state.milliSecondsElapsed);\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      this.setState({\n        average: 0\n      });\n      this.setState({\n        high: 0\n      });\n      this.setState({\n        low: 0\n      });\n      this.setState({\n        total: 0\n      });\n      this.setState({\n        myArray: []\n      });\n      this.setState({\n        range: 0\n      });\n      this.setState({\n        length: 0\n      });\n      this.setState({\n        clearMe: true\n      }); // console.log(this.state.clearMe + \"in the clear\");\n\n      this.setTimes();\n      this.startBtn.focus(); // console.log(\"Clear\");\n    });\n\n    _defineProperty(this, \"delete\", () => {\n      // should delete the last item\n      var array = this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        this.setState({\n          total: 0\n        });\n        this.setState({\n          low: 0\n        });\n        this.setState({\n          high: 0\n        });\n        this.setState({\n          myArray: []\n        });\n      } else {\n        // console.log(\"the array before delete \" + this.state.myArray);\n        this.setState({\n          myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        }); // console.log(\"the array after delete \" + this.state.myArray);\n\n        this.setState({\n          low: Math.min(...array2) * 100\n        });\n        this.setState({\n          high: Math.max(...array2) * 100\n        }); // find average\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        this.setState({\n          total: add * 100\n        });\n      }\n\n      this.setState({\n        length: this.state.length - 1\n      });\n      this.setState({\n        deleteMe: true\n      }); // console.log(this.state.deleteMe);\n      // this.setState({\n      //   myOldArray: myOldArray\n      // })\n      // this.setTimes();\n\n      this.startBtn.focus(); // console.log(this.state.myArray + \" this is myArray\");\n      // console.log(this.state.myOldArray + \" this is myOldArray\");\n      // console.log(this.state.testArray);\n      // console.log(\"Delete\");\n    });\n\n    this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false,\n      // this becomes true when something is loaded or first number added\n      otherLoading: false,\n      length: 0,\n      // this is the length of the array added for load and save\n      clearMe: false,\n      // if clear make clearMe as true, if clearMe is true then setTimes as 0\n      deleteMe: false,\n      clearOnce: 0,\n      testArray: []\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = /*#__PURE__*/React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n    this.getTimes();\n    console.log(\"Hello!\");\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  } // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n\n\n  // for some reason after you clear and reload '0,' is there\n  setTimes() {\n    let obj = []; // console.log(this.state.clearMe + \" clearMe\");\n\n    if (this.state.clearMe == true) {\n      obj = [];\n      localStorage.setItem('times', JSON.stringify(obj)); // console.log(obj);\n\n      let obj1 = 0;\n      localStorage.setItem('last', JSON.stringify(obj1));\n      let obj2 = 0;\n      localStorage.setItem('list', JSON.stringify(obj2));\n      let obj3 = 0;\n      localStorage.setItem('theTotal', JSON.stringify(obj3));\n      let obj4 = 0;\n      localStorage.setItem('fastest', JSON.stringify(obj4));\n      let obj5 = 0;\n      localStorage.setItem('slowest', JSON.stringify(obj5));\n      let obj6 = false;\n      localStorage.setItem('deleteMeTrue', JSON.stringify(obj6));\n    } else if (this.state.deleteMe == true) {\n      obj = this.state.myOldArray;\n      this.setState({\n        myArray: this.state.myOldArray\n      }); // console.log(this.state.myArray);\n\n      localStorage.setItem('times', JSON.stringify(obj)); // console.log(obj + \" I'm in delete me\");\n\n      let obj1 = 0; // there is no last me it was deleted\n\n      localStorage.setItem('last', JSON.stringify(obj1));\n      let obj2 = this.state.length;\n      localStorage.setItem('list', JSON.stringify(obj2));\n      let obj3 = this.state.total;\n      localStorage.setItem('theTotal', JSON.stringify(obj3));\n      let obj4 = this.state.low;\n      localStorage.setItem('fastest', JSON.stringify(obj4)); // console.log(obj4);\n\n      let obj5 = this.state.high;\n      localStorage.setItem('slowest', JSON.stringify(obj5));\n      let obj6 = true;\n      localStorage.setItem('deleteMeTrue', JSON.stringify(obj6)); // var newTotal = 0\n      // if (isNaN(this.state.total)) {\n      //   for (var x=0; x<this.state.myOldArray.length; x++) {\n      //     newTotal = this.state.myOldArray[x];\n      //   }\n      //   obj3 = newTotal;\n      //   localStorage.setItem('theTotal', JSON.stringify(obj3));\n      // }\n    } else {\n      obj = this.state.myArray;\n      localStorage.setItem('times', JSON.stringify(obj)); // console.log(obj);\n\n      let obj1 = this.state.milliSecondsElapsed / 100;\n      localStorage.setItem('last', JSON.stringify(obj1)); // console.log(obj1);\n\n      let obj2 = this.state.length + 1;\n      localStorage.setItem('list', JSON.stringify(obj2)); // console.log(obj2 + \" setlength\");\n      // console.log(this.state.total)\n\n      let obj3 = this.state.total + this.state.milliSecondsElapsed;\n      localStorage.setItem('theTotal', JSON.stringify(obj3)); // console.log(obj3 + \" total\");\n\n      let obj4 = this.state.low; // console.log(obj4 + \" \" + this.state.low);\n\n      let obj6 = this.state.milliSecondsElapsed; // console.log(obj6);\n\n      localStorage.setItem('fastest', JSON.stringify(obj6));\n\n      if (obj4 < obj6 && obj4 != 0) {\n        localStorage.setItem('fastest', JSON.stringify(obj4));\n      } // console.log(obj4 < obj6);\n\n\n      let obj5 = this.state.high;\n      localStorage.setItem('slowest', JSON.stringify(obj6));\n\n      if (obj5 > obj6) {\n        localStorage.setItem('slowest', JSON.stringify(obj5));\n      }\n\n      obj6 = false;\n      localStorage.setItem('deleteMeTrue', JSON.stringify(obj6));\n    }\n\n    if (isNaN(this.state.low)) {\n      this.setState({\n        low: 0\n      });\n    }\n\n    if (isNaN(this.state.high)) {\n      this.setState({\n        high: 0\n      });\n    }\n\n    if (isNaN(this.state.total)) {\n      // console.log(this.state.myOldArray);\n      // let current=this.state.myOldArray[0];\n      // const sum = obj.map(v => v).reduce((sum, current) => sum + current, 0);\n      // console.log(sum);\n      this.setState({\n        total: 0\n      }); // console.log(this.state.total);\n\n      this.setState({\n        length: 0\n      });\n      alert(\"There was an error. Restarting Average, Fastest, Slowest, and Range.\");\n    }\n  } // retrieve times from localStorage\n\n\n  getTimes() {\n    let myTimes = localStorage.getItem('times');\n    myTimes = JSON.parse(myTimes); // this is array\n    // console.log(myTimes);\n\n    let myLast = localStorage.getItem('last');\n    myLast = JSON.parse(myLast);\n    let myList = localStorage.getItem('list');\n    myList = JSON.parse(myList);\n    let myTruth = localStorage.getItem('deleteMeTrue');\n    myTruth = JSON.parse(myTruth); // console.log(myTruth);\n    // // this for loop is what causes the program to add undefined times\n\n    if (myTimes !== null) {\n      for (var i = 1; i < myTimes.length; i++) {\n        myTimes[i] = \" \" + myTimes[i];\n      }\n    }\n\n    if (myLast !== 0) {\n      this.setState(previousState => ({\n        myArray: [myLast, myTimes]\n      }));\n    } else if (myTruth == true) {\n      // maybe it would work by adding more items here, ehh\n      // console.log(\"I'm here\");\n      this.setState({\n        myArray: [myTimes]\n      }); // console.log(\"Hi!\");\n\n      this.setState({\n        deleteMe: false\n      });\n    } else {\n      this.setState({\n        myArray: []\n      });\n    } // console.log(myLast + \" \" + myTimes);\n\n\n    let myTotal = localStorage.getItem('theTotal');\n    myTotal = JSON.parse(myTotal); // console.log(myTotal + \" gettotal\");\n\n    this.setState({\n      total: myTotal\n    });\n    this.setState({\n      length: myList\n    }); // console.log(myList + \" getlength\");\n\n    let myFastest = localStorage.getItem('fastest');\n    myFastest = JSON.parse(myFastest); // console.log(myFastest);\n\n    this.setState({\n      low: myFastest\n    });\n    let mySlowest = localStorage.getItem('slowest');\n    mySlowest = JSON.parse(mySlowest);\n    this.setState({\n      high: mySlowest\n    }); // console.log(\"loading myarray\" + this.state.myArray);\n\n    if (this.state.myArray === \",\") {\n      this.setState({\n        myArray: []\n      });\n    }\n  } //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n\n  render() {\n    const myTotal = this.state.total; // console.log(this.state.myArray);\n\n    return __jsx(Layout, null, __jsx(\"div\", {\n      className: \"background\",\n      style: {\n        height: 575\n      }\n    }, __jsx(\"div\", null, __jsx(\"table\", {\n      align: \"right\",\n      className: \"antTable\"\n    }, __jsx(Table, {\n      align: \"center\",\n      height: \"150px\",\n      className: \"myTable\"\n    }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", {\n      className: \"text\",\n      align: \"center\"\n    }, \"Last Time\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", {\n      className: \"text\",\n      align: \"center\"\n    }, this.state.myArray.join(\", \"))))))), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Press the \", __jsx(\"b\", null, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Press the \", __jsx(\"b\", null, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Press the \", __jsx(\"b\", null, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 Lastly, write your name and then the time below \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 of your best time. Then, hit the add button to \"), __jsx(\"p\", {\n      className: \"text\",\n      align: \"left\"\n    }, \" \\u2002 add your time to the database! \"), __jsx(App, null), __jsx(\"div\", {\n      align: \"center\",\n      className: \"center\",\n      height: \"200px\"\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed / 100,\n      onChange: this.updateState,\n      ref: this.textInput,\n      readOnly: true\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.stopBtn = ref\n    }, \"STOP\"), __jsx(\"button\", {\n      onClick: this.clear,\n      ref: ref => this.clearBtn = ref\n    }, \"CLEAR\"), __jsx(\"button\", {\n      onClick: this.delete,\n      ref: ref => this.deleteBtn = ref\n    }, \"DELETE\"), __jsx(\"h1\", null, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n      align: \"center\",\n      width: \"200px\",\n      className: \"text\"\n    }, __jsx(\"thead\", null, __jsx(\"tr\", {\n      height: \"100px\"\n    }, __jsx(\"th\", null, \"Average\"), __jsx(\"th\", null, \"Fastest\"), __jsx(\"th\", null, \"Slowest\"), __jsx(\"th\", null, \"Range\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", null, myTotal ? __jsx(\"td\", null, (this.state.total / this.state.length / 100).toFixed(2)) : __jsx(\"td\", null, \" 0 \")), __jsx(\"td\", null, this.state.low / 100), __jsx(\"td\", null, this.state.high / 100), __jsx(\"td\", null, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}