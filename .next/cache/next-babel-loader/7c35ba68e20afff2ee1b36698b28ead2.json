{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useEffect, useReducer, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  // focus on start button before timer is started\n  // once its started switch focus to stop button\n  // redo\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      // some logic to assess stop/start of timer\n      if (_this.state.milliSecondsElapsed === 0) {\n        _this.startBtn.click();\n      } else if (_this.state.timerInProgress === false) {\n        _this.startBtn.click();\n      } else {\n        _this.stopBtn.click();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      if (_this.state.timerInProgress === true) {\n        return;\n      }\n\n      _this.setState({\n        milliSecondsElapsed: 0\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          milliSecondsElapsed: _this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, function () {\n          _this.stopBtn.focus(); // stop the timer\n\n        });\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function () {\n      _this.setState({\n        timerInProgress: false\n      }, function () {\n        clearInterval(_this.timer);\n\n        _this.startBtn.focus(); // start the timer\n\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      // some logic to assess stop/start of timer\n      if (_this.state.milliSecondsElapsed === 0) {\n        _this.handleStart();\n      } else if (_this.state.timerInProgress === false) {\n        _this.handleStart();\n      } else {\n        _this.handleStop();\n      }\n    });\n\n    _this.state = {\n      milliSecondsElapsed: 0,\n      timerInProgress: false // state to detect when timer has started\n\n    };\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n    _this.startBtn = React.createRef();\n    _this.stopBtn = React.createRef();\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"updateState\",\n    value: function updateState(e) {\n      this.setState({\n        milliSecondsElapsed: e.target.milliSecondsElapsed\n      });\n    }\n  }, {\n    key: \"getMilliseconds\",\n    value: function getMilliseconds() {\n      return (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n    }\n  }, {\n    key: \"getSeconds\",\n    value: function getSeconds() {\n      var milli = this.state.milliSecondsElapsed;\n      var seconds = 0;\n      seconds = milli / 100;\n      var myTrunc = Math.trunc(seconds);\n      myTrunc = myTrunc % 60;\n      return (\"0\" + myTrunc).slice(-2);\n    }\n  }, {\n    key: \"getMinutes\",\n    value: function getMinutes() {\n      var milli = this.state.milliSecondsElapsed;\n      var seconds = 0;\n      var minutes = 0;\n      seconds = milli / 100;\n      minutes = seconds / 60;\n      var myTrunc = Math.trunc(minutes);\n      return (\"0\" + myTrunc).slice(-2);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"keypress\", this.keyPress);\n      this.startBtn.focus();\n      this.stopBtn.focus();\n    }\n  }, {\n    key: \"render\",\n    // <button onClick = {this.handleStart}>START</button>\n    // <button onClick = {this.handleStop}>STOP</button>\n    // <input value = {this.state.milliSecondsElapsed} onChange = {this.updateState} ref={this.textInput}/>\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        className: \"index\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 4\n        }\n      }, __jsx(\"input\", {\n        value: this.state.milliSecondsElapsed,\n        onChange: this.updateState,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 4\n        }\n      }), __jsx(\"button\", {\n        onClick: this.handleStart,\n        ref: function ref(_ref) {\n          return _this2.startBtn = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 5\n        }\n      }, \"START\"), __jsx(\"button\", {\n        onClick: this.handleStop,\n        ref: function ref(_ref2) {\n          return _this2.startBtn = _ref2;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 5\n        }\n      }, \"STOP\"));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","useEffect","useReducer","useRef","ReactDOM","Home","props","e","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","setState","timer","setInterval","focus","clearInterval","handleStart","handleStop","updateState","bind","createRef","target","slice","milli","seconds","myTrunc","Math","trunc","minutes","window","addEventListener","keyPress","ref","Component"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useRef} from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Home extends React.Component {\n\n\t// focus on start button before timer is started\n\t// once its started switch focus to stop button\n\t// redo\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmilliSecondsElapsed: 0,\n\t\t\ttimerInProgress: false // state to detect when timer has started\n\t\t};\n\t\tthis.updateState = this.updateState.bind(this);\n\t\tthis.startBtn = React.createRef();\n\t\tthis.stopBtn = React.createRef();\n\t}\n\n\tupdateState(e) {\n\t\tthis.setState({milliSecondsElapsed: e.target.milliSecondsElapsed })\n\t}\n\n\tkeyPress = (e) => {\n\t  // some logic to assess stop/start of timer\n\t  if (this.state.milliSecondsElapsed === 0) {\n\t    this.startBtn.click();\n\t  } else if (this.state.timerInProgress === false) {\n\t    this.startBtn.click();\n\t  } else {\n\t    this.stopBtn.click();\n\t  }\n\t};\n\n\tgetMilliseconds() {\n\t\treturn (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n\t}\n\n\tgetSeconds() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tseconds = milli / 100;\n\t\tvar myTrunc = Math.trunc(seconds);\n\t\tmyTrunc = myTrunc % 60;\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t}\n\n\tgetMinutes() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tvar minutes = 0;\n\t\tseconds = milli / 100;\n\t\tminutes = seconds / 60;\n\t\tvar myTrunc = Math.trunc(minutes);\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t}\n\n\thandleStart = () => {\n\t\tif (this.state.timerInProgress === true) {\n\t\t\treturn;\n\t\t}\n\t\tthis.setState({\n\t\t\tmilliSecondsElapsed: (0)\n\t\t});\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tmilliSecondsElapsed: (this.state.milliSecondsElapsed + 1),\n\t\t\t\ttimerInProgress: true\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.stopBtn.focus(); // stop the timer\n\t\t\t});\n\t\t}, 10)\n\t}\n\n\thandleStop = () => {\n  \t\tthis.setState(\n    \t\t{\n      \t\t\ttimerInProgress: false\n    \t\t},\n    \t\t() => {\n      \t\tclearInterval(this.timer);\n      \t\tthis.startBtn.focus(); // start the timer\n    \t\t}\n  \t\t);\n\t};\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keypress\", this.keyPress);\n\t\tthis.startBtn.focus();\n\t\tthis.stopBtn.focus();\n\t}\n\n\tkeyPress = (e) => {\n    \t// some logic to assess stop/start of timer\n   \t\tif (this.state.milliSecondsElapsed === 0) {\n\t        this.handleStart();\n\t    } else if (this.state.timerInProgress === false) {\n\t        this.handleStart();\n\t    } else {\n\t        this.handleStop();\n\t    }\n\t};\n\n\t// <button onClick = {this.handleStart}>START</button>\n\t// <button onClick = {this.handleStop}>STOP</button>\n\t// <input value = {this.state.milliSecondsElapsed} onChange = {this.updateState} ref={this.textInput}/>\n\n\trender() {\n\t\treturn (\t\t\t\n\t\t\t<div className=\"index\">\n\t\t\t<input value={this.state.milliSecondsElapsed} onChange={this.updateState} />\n\t\t\t\t<button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>START</button>\n\t\t\t\t<button onClick={this.handleStop} ref={(ref) => (this.startBtn = ref)}>STOP</button>\n\n\t\t\t</div>\n\n\t\t);\n\t}\n\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}