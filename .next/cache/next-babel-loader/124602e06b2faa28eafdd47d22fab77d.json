{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\n\nvar Timer = /*#__PURE__*/function (_React$Component) {\n  _inherits(Timer, _React$Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer(props) {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"textInput\", function () {\n      clearInterval(_this.timer);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (_this.state.milliSecondsElapsed === 0) {\n          _this.startBtn.click();\n        } else if (_this.state.timerInProgress === false) {\n          _this.startBtn.click();\n        } else {\n          _this.stopBtn.click();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      if (_this.state.timerInProgress === true) return;\n\n      _this.setState({\n        milliSecondsElapsed: 0\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          milliSecondsElapsed: _this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, function () {\n          _this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function () {\n      _this.setState({\n        total: _this.state.total + _this.state.milliSecondsElapsed\n      });\n\n      _this.setState(function (previousState) {\n        return {\n          timerInProgress: false,\n          myArray: [].concat(_toConsumableArray(previousState.myArray), [// <-- shallow copy existing data\n          _this.state.milliSecondsElapsed / 100 // <-- add new time\n          ])\n        };\n      }, // maybe here? find average\n      // var total = 0;\n      // for (var i = 0; i < myArray.length; i++) {\n      //   total += grades[i];\n      // }\n      // var average = total / grades.length;\n      function () {\n        clearInterval(_this.timer);\n\n        _this.startBtn.focus();\n      });\n\n      _this.setState({\n        average: _this.state.total / myArray.length\n      });\n    });\n\n    _this.state = {\n      myArray: [],\n      // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      timerInProgress: false // state to detect whether timer has started\n\n    };\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n    _this.textInput = React.createRef();\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(e) {\n      this.setState({\n        milliSecondsElapsed: e.target.milliSecondsElapsed\n      });\n    }\n  }, {\n    key: \"render\",\n    // find the average AT EVERY GO \n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: \"index\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 8\n        }\n      }, __jsx(\"input\", {\n        value: this.state.milliSecondsElapsed / 100,\n        onChange: this.updateState,\n        ref: this.textInput,\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 10\n        }\n      }), __jsx(\"button\", {\n        onClick: this.handleStart,\n        ref: function ref(_ref) {\n          return _this2.startBtn = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 10\n        }\n      }, \"START\"), __jsx(\"button\", {\n        onClick: this.handleStop,\n        ref: function ref(_ref2) {\n          return _this2.stopBtn = _ref2;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 10\n        }\n      }, \"STOP\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 10\n        }\n      }, this.state.milliSecondsElapsed / 100)), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, this.state.myArray.join(\"\\n \")), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, this.state.total));\n    }\n  }]);\n\n  return Timer;\n}(React.Component);\n\nexport { Timer as default };","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","Component","Layout","Timer","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","setState","setInterval","focus","total","previousState","myArray","average","length","updateState","bind","textInput","createRef","window","addEventListener","keyPress","removeEventListener","target","handleStart","ref","handleStop","join"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myArray: [], // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      timerInProgress: false // state to detect whether timer has started\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n  \n\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n  };\n\n  handleStart = () => {\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n  handleStop = () => {\n    this.setState({\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState(\n      (previousState) => ({\n        timerInProgress: false,\n        myArray: [\n          ...previousState.myArray, // <-- shallow copy existing data\n          this.state.milliSecondsElapsed / 100 // <-- add new time\n        ]\n      }),\n      // maybe here? find average\n      // var total = 0;\n      // for (var i = 0; i < myArray.length; i++) {\n      //   total += grades[i];\n      // }\n      // var average = total / grades.length;\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n        this.setState({\n      average: this.state.total / myArray.length\n    })\n  };\n\n  // find the average AT EVERY GO \n\n  render() {\n    return (\n\t    <Layout>\n\t      <div className=\"index\" align='center'>\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n        <div>{this.state.myArray.join(\"\\n \")}</div>\n        <h1>{this.state.total}</h1>\n        \n\n        \n\n        \n      </Layout>\n\n\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}