{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Austin/NewWebsite/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\";\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"textInput\", function () {\n      clearInterval(_this.timer);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyPress\", function (e) {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (_this.state.milliSecondsElapsed === 0) {\n          _this.startBtn.click();\n        } else if (_this.state.timerInProgress === false) {\n          _this.startBtn.click();\n        } else {\n          _this.stopBtn.click();\n        }\n      }\n\n      if (e.keyCode === 99) {\n        _this.clearBtn.click();\n      }\n\n      if (e.keyCode === 100) {\n        _this.deleteBtn.click();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function () {\n      _this.setState({\n        startTime: Date.now()\n      });\n\n      if (_this.state.timerInProgress === true) return;\n\n      _this.setState({\n        milliSecondsElapsed: 0\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          milliSecondsElapsed: _this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, function () {\n          _this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function () {\n      // console.log(this.state.milliSecondsElapsed);\n      if (_this.state.average === 0) {\n        // if its the first go through, average is set to first value\n        _this.setState({\n          average: (_this.state.milliSecondsElapsed / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.setState({\n        // adds value to the total\n        total: _this.state.total + _this.state.milliSecondsElapsed\n      });\n\n      _this.setState({\n        last: _this.state.milliSecondsElapsed\n      });\n\n      if (_this.state.high < _this.state.milliSecondsElapsed) {\n        // finds slowest time\n        _this.setState({\n          high: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low === 0) {\n        // finds fastest time\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      if (_this.state.low > _this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        _this.setState({\n          low: _this.state.milliSecondsElapsed\n        });\n      }\n\n      _this.setState( // adding the value to the array\n      function (previousState) {\n        return {\n          timerInProgress: false,\n          // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n          myArray: [_this.state.milliSecondsElapsed / 100].concat(_toConsumableArray(previousState.myArray))\n        };\n      }, function () {\n        clearInterval(_this.timer);\n\n        _this.startBtn.focus();\n      });\n\n      if (_this.state.count === 1) {\n        _this.setState({\n          // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n          average: (_this.state.total / _this.state.myArray.length / 100).toFixed(2)\n        });\n      }\n\n      _this.setState({\n        count: 1\n      });\n\n      _this.setState({\n        endTime: Date.now()\n      });\n\n      _this.setState({\n        myOldArray: _this.state.myArray\n      });\n\n      _this.setTimes(); // console.log(this.state.milliSecondsElapsed);\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clear\", function () {\n      _this.setState({\n        average: 0\n      });\n\n      _this.setState({\n        high: 0\n      });\n\n      _this.setState({\n        low: 0\n      });\n\n      _this.setState({\n        total: 0\n      });\n\n      _this.setState({\n        myArray: []\n      });\n\n      _this.setState({\n        range: 0\n      });\n\n      _this.setTimes();\n\n      _this.startBtn.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delete\", function () {\n      // should delete the last item\n      var array = _this.state.myArray;\n      var array2 = [];\n      var last = array[0];\n      var add = 0; // if array2 is empty - get rid of things saying infinity\n\n      for (var u = 1; u < array.length; u++) {\n        array2.push(array[u]);\n      }\n\n      if (array2.length == 0) {\n        _this.setState({\n          total: 0\n        });\n\n        _this.setState({\n          low: 0\n        });\n\n        _this.setState({\n          high: 0\n        });\n\n        _this.setState({\n          myArray: []\n        });\n      } else {\n        _this.setState({\n          myArray: _this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n\n        });\n\n        _this.setState({\n          low: Math.min.apply(Math, array2) * 100\n        });\n\n        _this.setState({\n          high: Math.max.apply(Math, array2) * 100\n        }); // find average\n\n\n        for (var i = 0; i < array2.length; i++) {\n          add = add + array2[i];\n        }\n\n        _this.setState({\n          total: add * 100\n        });\n      }\n\n      _this.setTimes();\n\n      _this.startBtn.focus();\n    });\n\n    _this.state = {\n      name: \"...\"\n    }; // this.state = {difference: 0};\n\n    _this.state = {\n      myArray: [],\n      // <- add initial empty array\n      myOldArray: [],\n      // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 0,\n      // lowest value\n      count: 0,\n      last: 0,\n      // the last element recieved\n      timerInProgress: false,\n      // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false,\n      // this becomes true when something is loaded or first number added\n      otherLoading: false\n    };\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n    _this.textInput = /*#__PURE__*/React.createRef();\n    _this.setTimes = _this.setTimes.bind(_assertThisInitialized(_this));\n    _this.getTimes = _this.getTimes.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"keypress\", this.keyPress);\n      this.getTimes();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"keypress\", this.keyPress);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(e) {\n      this.setState({\n        milliSecondsElapsed: e.target.milliSecondsElapsed\n      });\n    } // press l to load times?\n    // need a way to cancel all of these if someone is entering a time\n\n  }, {\n    key: \"setTimes\",\n    value: function setTimes() {\n      var obj = this.state.myArray;\n      localStorage.setItem('myTimes', JSON.stringify(obj)); // console.log(obj);\n\n      var obj1 = this.state.low;\n      localStorage.setItem('lowTime', JSON.stringify(obj1));\n\n      if (this.state.milliSecondsElapsed / 100 > this.state.high) {\n        var obj2 = this.state.milliSecondsElapsed / 100;\n        localStorage.setItem('highTime', JSON.stringify(obj2));\n      } else {\n        var _obj = this.state.high;\n        localStorage.setItem('highTime', JSON.stringify(_obj));\n      } // console.log(obj2);\n\n\n      var obj3 = this.state.total;\n      localStorage.setItem('totalTime', JSON.stringify(obj3)); // add obj for last time, then add that to the array\n\n      var obj4 = this.state.milliSecondsElapsed / 100;\n      localStorage.setItem('lastTime', JSON.stringify(obj4)); // console.log(obj4 + \" obj4\");\n    } // retrieve times from localStorage\n\n  }, {\n    key: \"getTimes\",\n    value: function getTimes() {\n      var data = localStorage.getItem('myTimes'); // average, doesn't include last time\n\n      data = JSON.parse(data); // this.setState({ myArray: data });\n      // console.log(this.state.myArray);\n\n      var data1 = localStorage.getItem('lowTime'); // fastest time\n\n      data1 = JSON.parse(data1); // console.log(data1 + \" data1\");\n\n      this.setState({\n        low: data1\n      }); // console.log(this.state.low);\n\n      var data2 = localStorage.getItem('highTime'); // slowest time\n\n      data2 = JSON.parse(data2);\n      this.setState({\n        high: data2\n      });\n      var data3 = localStorage.getItem('totalTime'); // total time used with average\n      // data3 = JSON.parse(data3);\n      // this.setState({ total: data3 });\n      // console.log(data3 + \" total\");\n\n      var data4 = localStorage.getItem('lastTime'); // last time\n\n      var data5 = JSON.parse(data4) + JSON.parse(data3) / 100; // add last time with total\n      // console.log(data5 + \" last\");\n\n      this.setState({\n        last: data5 * 100\n      }); // console.log(this.state.last);\n\n      this.setState({\n        otherLoading: true\n      }); // for some reason its taking last as 0\n\n      this.setState(function (previousState) {\n        return {\n          myArray: [data4, data] // you can't set a variable (this.state.last) in this method and then use it here\n\n        };\n      }); // console.log(this.state.myArray);\n\n      this.setState({\n        total: data5 * 100\n      }); // console.log(this.state.myArray.length);\n\n      if (data1 > data4) {\n        // if last number is less than lowTime\n        this.setState({\n          low: data4 * 100\n        });\n      }\n\n      if (data2 < data4) {\n        // if last number is higher than highTime\n        this.setState({\n          high: data4 * 100\n        });\n      }\n    }\n    /*   {!this.state.loading && !this.state.myArray.length ? (\n       <div>\n         <button onClick={ () => this.getTimes() }>Load Times</button>\n         <p className='text'>This button will load your last times!</p>\n       </div>\n     ) : (\n       <p></p>\n     )}\n     */\n    //       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var myTotal = this.state.total; // console.log(this.state.myArray);\n\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 6\n        }\n      }, __jsx(\"div\", {\n        className: \"background\",\n        style: {\n          height: 575\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 7\n        }\n      }, __jsx(\"table\", {\n        align: \"right\",\n        className: \"antTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 7\n        }\n      }, __jsx(Table, {\n        align: \"center\",\n        height: \"150px\",\n        className: \"myTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 7\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }\n      }, __jsx(\"th\", {\n        className: \"text\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }\n      }, \"Last Time\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }\n      }, __jsx(\"td\", {\n        className: \"text\",\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 17\n        }\n      }, this.state.myArray.join(\", \"))))))), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 58\n        }\n      }, \"spacebar\"), \" to start/stop the timer.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 58\n        }\n      }, \"c\"), \" button to clear everything.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Press the \", __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 58\n        }\n      }, \"d\"), \" button to delete the last time.\"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 7\n        }\n      }, \" \\u2002 Lastly, write your name and then the time below \"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 7\n        }\n      }, \" \\u2002 of your best time. Then, hit the add button to \"), __jsx(\"p\", {\n        className: \"text\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 7\n        }\n      }, \" \\u2002 add your time to the database! \"), __jsx(App, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 7\n        }\n      }), __jsx(\"table\", {\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"fixed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 9\n        }\n      }, \" \", __jsx(\"img\", {\n        src: \"../static/IMG_4152.png\",\n        width: \"15%\",\n        height: \"15%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 33\n        }\n      }), \" \")), __jsx(\"div\", {\n        align: \"center\",\n        className: \"center\",\n        height: \"200px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 8\n        }\n      }, __jsx(\"input\", {\n        value: this.state.milliSecondsElapsed / 100,\n        onChange: this.updateState,\n        ref: this.textInput,\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 10\n        }\n      }), __jsx(\"button\", {\n        onClick: this.handleStart,\n        ref: function ref(_ref) {\n          return _this2.startBtn = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 10\n        }\n      }, \"START\"), __jsx(\"button\", {\n        onClick: this.handleStop,\n        ref: function ref(_ref2) {\n          return _this2.stopBtn = _ref2;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 10\n        }\n      }, \"STOP\"), __jsx(\"button\", {\n        onClick: this.clear,\n        ref: function ref(_ref3) {\n          return _this2.clearBtn = _ref3;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }\n      }, \"CLEAR\"), __jsx(\"button\", {\n        onClick: this[\"delete\"],\n        ref: function ref(_ref4) {\n          return _this2.deleteBtn = _ref4;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }\n      }, \"DELETE\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 10\n        }\n      }, this.state.milliSecondsElapsed / 100)), __jsx(\"table\", {\n        align: \"center\",\n        width: \"200px\",\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 9\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        height: \"100px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }\n      }, __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 15\n        }\n      }, \"Average\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 15\n        }\n      }, \"Fastest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 15\n        }\n      }, \"Slowest\"), __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 15\n        }\n      }, \"Range\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 15\n        }\n      }, myTotal ? __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 19\n        }\n      }, (this.state.total / this.state.myArray.length / 100).toFixed(2)) : __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 19\n        }\n      }, \" 0 \")), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 15\n        }\n      }, this.state.low / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 15\n        }\n      }, this.state.high / 100), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 15\n        }\n      }, (this.state.high / 100 - this.state.low / 100).toFixed(2)))))));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/Users/Austin/NewWebsite/website/pages/index.js"],"names":["React","Component","Layout","Table","addTime","App","Home","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","clearBtn","deleteBtn","setState","startTime","Date","now","setInterval","focus","average","toFixed","loading","total","last","high","low","previousState","myArray","count","length","endTime","myOldArray","setTimes","range","array","array2","add","u","push","splice","Math","min","max","i","name","otherLoading","updateState","bind","textInput","createRef","getTimes","window","addEventListener","keyPress","removeEventListener","target","obj","localStorage","setItem","JSON","stringify","obj1","obj2","obj3","obj4","data","getItem","parse","data1","data2","data3","data4","data5","myTotal","height","join","handleStart","ref","handleStop","clear"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\nimport Table from 'react-bootstrap/Table';\nimport \"../styles.scss\"\nimport { addTime } from \"../lib/util\";\nimport App from \"../lib/App.js\";\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name:\"...\"};\n    // this.state = {difference: 0};\n    this.state = {\n      myArray: [], // <- add initial empty array\n      myOldArray: [], // the array you need to load in\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 0, // lowest value\n      count: 0,\n      last: 0, // the last element recieved\n      timerInProgress: false, // state to detect whether timer has started\n      startTime: 0,\n      endTime: 0,\n      loading: false, // this becomes true when something is loaded or first number added\n      otherLoading: false,\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n    this.setTimes = this.setTimes.bind(this);\n    this.getTimes = this.getTimes.bind(this);\n\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n    this.getTimes();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n\n\n  // press l to load times?\n  // need a way to cancel all of these if someone is entering a time\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n    if (e.keyCode === 99) {\n      this.clearBtn.click();\n    }\n    if (e.keyCode === 100) {\n      this.deleteBtn.click();\n    }\n  };\n\n  handleStart = () => {\n\n    this.setState({\n      startTime: Date.now()\n    })\n\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n\n  handleStop = () => {\n    // console.log(this.state.milliSecondsElapsed);\n    if (this.state.average === 0) { // if its the first go through, average is set to first value\n      this.setState({\n        average: (this.state.milliSecondsElapsed / 100).toFixed(2)\n      })\n    }\n\n    this.setState({ loading: true });\n\n    this.setState({ // adds value to the total\n      total: this.state.total + this.state.milliSecondsElapsed\n    });\n    this.setState({\n      last: this.state.milliSecondsElapsed\n    })\n    if (this.state.high < this.state.milliSecondsElapsed) { // finds slowest time\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low === 0) { // finds fastest time\n      this.setState({\n        low: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState( // adding the value to the array\n      (previousState) => ({\n        timerInProgress: false,\n        // [{this.state.milliSecondsElapsed / 100}].concat(myArray);\n       myArray: [\n          this.state.milliSecondsElapsed / 100, // <-- add new time\n          ...previousState.myArray // <-- shallow copy existing data\n        ],\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    if (this.state.count === 1) {\n      this.setState({\n        // average: ((this.state.total) / (this.state.myArray.length) / 100).toFixed(2)\n        average: (this.state.total / this.state.myArray.length / 100).toFixed(2)\n      })\n    }    \n\n    this.setState({\n      count: 1\n    })\n\n    this.setState({\n      endTime: Date.now()\n    })\n\n    this.setState({\n      myOldArray: this.state.myArray\n    })\n\n    this.setTimes();\n    // console.log(this.state.milliSecondsElapsed);\n\n  };\n\n  clear = () => {\n    this.setState({\n      average: 0\n    })\n    this.setState({\n      high: 0\n    })\n    this.setState({\n      low: 0\n    })\n    this.setState({\n      total: 0\n    })\n    this.setState({\n      myArray: []\n    })\n    this.setState({\n      range: 0\n    })\n    this.setTimes();\n    this.startBtn.focus();\n\n    \n\n  };\n\n\n  delete = () => { // should delete the last item\n    \n    var array=this.state.myArray;\n    var array2=[];\n\n    var last = array[0]\n    var add=0;\n\n    // if array2 is empty - get rid of things saying infinity\n\n    for (var u=1; u<array.length; u++) {\n      array2.push(array[u]);\n    }\n\n    if (array2.length == 0) {\n      this.setState({\n        total: 0\n      })\n      this.setState({\n        low: 0\n      })\n      this.setState({\n        high: 0\n      })\n      this.setState({\n        myArray: []\n      })\n    } else {\n      this.setState({ \n        myArray: this.state.myArray.splice(1) // to delete first element in the last time list (the last element added)\n      })\n      this.setState({\n        low: (Math.min(...array2)*100)\n      })\n      this.setState({\n        high: (Math.max(...array2)*100)\n      })\n      // find average\n      for (var i=0; i<array2.length; i++) {\n        add = add + array2[i];\n      }\n      this.setState({\n        total: add*100\n      })\n    }\n    this.setTimes();\n    this.startBtn.focus();\n  };\n\n  setTimes() {\n    let obj = this.state.myArray;\n    localStorage.setItem('myTimes', JSON.stringify(obj));\n    // console.log(obj);\n    let obj1 = this.state.low;\n    localStorage.setItem('lowTime', JSON.stringify(obj1));\n    if (this.state.milliSecondsElapsed/100 > this.state.high) {\n      let obj2 = this.state.milliSecondsElapsed/100;\n      localStorage.setItem('highTime', JSON.stringify(obj2));\n    } else {\n      let obj2 = this.state.high;\n      localStorage.setItem('highTime', JSON.stringify(obj2));\n    }\n\n\n    // console.log(obj2);\n    let obj3 = this.state.total;\n    localStorage.setItem('totalTime', JSON.stringify(obj3));\n\n    // add obj for last time, then add that to the array\n    let obj4 = this.state.milliSecondsElapsed/100;\n    localStorage.setItem('lastTime', JSON.stringify(obj4));\n    // console.log(obj4 + \" obj4\");\n\n  }\n\n  // retrieve times from localStorage\n  getTimes() {\n    let data = localStorage.getItem('myTimes'); // average, doesn't include last time\n    data = JSON.parse(data);\n    // this.setState({ myArray: data });\n    // console.log(this.state.myArray);\n\n    let data1 = localStorage.getItem('lowTime'); // fastest time\n    data1 = JSON.parse(data1);\n    // console.log(data1 + \" data1\");\n    this.setState({ low: data1 });\n    // console.log(this.state.low);\n\n    let data2 = localStorage.getItem('highTime'); // slowest time\n    data2 = JSON.parse(data2);\n    this.setState({ high: data2 });\n\n    let data3 = localStorage.getItem('totalTime'); // total time used with average\n    // data3 = JSON.parse(data3);\n    // this.setState({ total: data3 });\n    // console.log(data3 + \" total\");\n\n    let data4 = localStorage.getItem('lastTime'); // last time\n    let data5 = JSON.parse(data4) + (JSON.parse(data3)/100); // add last time with total\n    // console.log(data5 + \" last\");\n    this.setState({ last: data5*100 });\n    // console.log(this.state.last);\n\n    this.setState({ otherLoading: true });\n\n    // for some reason its taking last as 0\n    this.setState(previousState => ({\n      myArray: [data4, data ] // you can't set a variable (this.state.last) in this method and then use it here\n    }));\n\n    // console.log(this.state.myArray);\n\n    this.setState({ total: data5*100});\n    // console.log(this.state.myArray.length);\n\n    if (data1>data4) { // if last number is less than lowTime\n      this.setState({ low: data4*100 })\n    }\n\n    if (data2 < data4) { // if last number is higher than highTime\n      this.setState({ high: data4*100 })\n    }\n\n\n  }\n\n     /*   {!this.state.loading && !this.state.myArray.length ? (\n        <div>\n          <button onClick={ () => this.getTimes() }>Load Times</button>\n          <p className='text'>This button will load your last times!</p>\n        </div>\n      ) : (\n        <p></p>\n      )}\n      */\n\n\n//       <div className=\"fixed\"> <img src=\"/static/IMG_1933.jpeg\" align='left' width='360' height='240' /> </div>\n\n  render() {\n    const myTotal = this.state.total;\n    // console.log(this.state.myArray);\n    return (\n\t    <Layout>\n      <div className='background' style={{height:575}}>\n\n\n\n      <div>\n      <table align=\"right\" className='antTable'>\n      <Table align=\"center\" height=\"150px\" className='myTable'>\n        <thead>\n          <tr>\n            <th className=\"text\" align=\"center\">Last Time</th>\n          \n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n                <td className=\"text\" align=\"center\">{this.state.myArray.join(\", \")}</td>  \n            \n          </tr>\n        </tbody>\n\n      </Table>\n      \n      </table>\n      </div>\n\n      <p className=\"text\" align='left'> &ensp; Press the <b>spacebar</b> to start/stop the timer.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>c</b> button to clear everything.</p>\n      <p className=\"text\" align='left'> &ensp; Press the <b>d</b> button to delete the last time.</p>\n      <p className=\"text\" align='left'> &ensp; Lastly, write your name and then the time below </p>\n      <p className=\"text\" align='left'> &ensp; of your best time. Then, hit the add button to </p>\n      <p className=\"text\" align='left'> &ensp; add your time to the database! </p>\n      <App />\n\n\n      <table align='left'>\n        <div className=\"fixed\"> <img src=\"../static/IMG_4152.png\" width='15%' height='15%' /> </div>\n      </table>\n\n\t      <div align='center' className=\"center\" height=\"200px\">\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\n          <button onClick={this.clear} ref={(ref) => (this.clearBtn = ref)}>\n            CLEAR \n          </button>\n\n          <button onClick={this.delete} ref={(ref) => (this.deleteBtn = ref)}>\n            DELETE\n          </button>\n\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n\n\n\n        <table align=\"center\" width=\"200px\" className=\"text\">\n          <thead>\n            <tr height=\"100px\">\n              <th>Average</th>\n              <th>Fastest</th>\n              <th>Slowest</th>\n              <th>Range</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>{myTotal ? (\n                  <td>{(this.state.total / this.state.myArray.length / 100).toFixed(2)}</td>\n                ) : (\n                  <td> 0 </td>\n                )}</td>\n              <td>{this.state.low/100}</td>\n              <td>{this.state.high/100}</td>\n              <td>{(this.state.high/100 - this.state.low/100).toFixed(2)}</td>\n            </tr>\n          </tbody>\n         </table>\n\n      </div>\n\n\n\n      </Layout>\n\n\n    );\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}