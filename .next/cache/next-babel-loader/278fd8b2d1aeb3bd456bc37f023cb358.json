{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useReducer, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Home extends React.Component {\n  // focus on start button before timer is started\n  // once its started switch focus to stop button\n  // redo\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      // g button\n      if (e.keyCode == 103) {\n        handleStart();\n      }\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      // spacebar\n      if (e.keyCode == 32) {\n        handleStop();\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.handleStart();\n      } else if (this.state.timerInProgress === false) {\n        this.handleStart();\n      } else {\n        this.handleStop();\n      }\n    });\n\n    this.state = {\n      milliSecondsElapsed: 0,\n      timerInProgress: false // state to detect when timer has started\n\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  onClickHandler() {\n    this.setState(currentState => ({\n      isStarted: !currentState.isStarted\n    }));\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  }\n\n  getMilliseconds() {\n    return (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n  }\n\n  getSeconds() {\n    var milli = this.state.milliSecondsElapsed;\n    var seconds = 0;\n    seconds = milli / 100;\n    var myTrunc = Math.trunc(seconds);\n    myTrunc = myTrunc % 60;\n    return (\"0\" + myTrunc).slice(-2);\n  }\n\n  getMinutes() {\n    var milli = this.state.milliSecondsElapsed;\n    var seconds = 0;\n    var minutes = 0;\n    seconds = milli / 100;\n    minutes = seconds / 60;\n    var myTrunc = Math.trunc(minutes);\n    return (\"0\" + myTrunc).slice(-2);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  // <button onClick = {this.handleStart}>START</button>\n  // <button onClick = {this.handleStop}>STOP</button>\n  // <input value = {this.state.milliSecondsElapsed} onChange = {this.updateState} ref={this.textInput}/>\n  render() {\n    return __jsx(\"div\", {\n      className: \"index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 4\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed,\n      onChange: this.updateState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 4\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.startBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }\n    }, \"STOP\"));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","useEffect","useReducer","useRef","ReactDOM","Home","Component","constructor","props","clearInterval","timer","e","keyCode","handleStart","handleStop","setState","milliSecondsElapsed","setInterval","state","timerInProgress","updateState","bind","textInput","createRef","onClickHandler","currentState","isStarted","target","getMilliseconds","slice","getSeconds","milli","seconds","myTrunc","Math","trunc","getMinutes","minutes","componentDidMount","window","addEventListener","keyPress","render","ref","startBtn"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useRef} from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Home extends React.Component {\n\n\t// focus on start button before timer is started\n\t// once its started switch focus to stop button\n\t// redo\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmilliSecondsElapsed: 0,\n\t\t\ttimerInProgress: false // state to detect when timer has started\n\t\t};\n\t\tthis.updateState = this.updateState.bind(this);\n\t\tthis.textInput = React.createRef();\n\n\t}\n\n\ttextInput = () => {\n\t\tclearInterval(this.timer);\n\t}\n\n\tonClickHandler() {\n\t\tthis.setState(currentState => ({\n\t\t\tisStarted: !currentState.isStarted\n\t\t}));\n\t}\n\n\tupdateState(e) {\n\t\tthis.setState({milliSecondsElapsed: e.target.milliSecondsElapsed })\n\t}\n\n\tkeyPress = (e) => {\n\t\t// g button\n\t\tif (e.keyCode == 103) {\n\t\t\thandleStart();\n\t\t}\n\t}\n\n\tkeyPress = (e) => {\n\t\t// spacebar\n\t\tif (e.keyCode == 32) {\n\t\t\thandleStop();\n\t\t}\n\t}\n\n\tgetMilliseconds() {\n\t\treturn (\"0\" + this.state.milliSecondsElapsed).slice(-2);\n\t}\n\n\tgetSeconds() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tseconds = milli / 100;\n\t\tvar myTrunc = Math.trunc(seconds);\n\t\tmyTrunc = myTrunc % 60;\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t}\n\n\tgetMinutes() {\n\t\tvar milli = this.state.milliSecondsElapsed;\n\t\tvar seconds = 0;\n\t\tvar minutes = 0;\n\t\tseconds = milli / 100;\n\t\tminutes = seconds / 60;\n\t\tvar myTrunc = Math.trunc(minutes);\n\t\treturn (\"0\" + myTrunc).slice(-2);\n\t}\n\n\thandleStart = () => {\n\t\tthis.setState({\n\t\t\tmilliSecondsElapsed: (0)\n\t\t});\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tmilliSecondsElapsed: (this.state.milliSecondsElapsed + 1)\n\t\t\t});\n\t\t}, 10)\n\t}\n\n\thandleStop = () => {\n\t\tclearInterval(this.timer);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keypress\", this.keyPress);\n\t}\n\n\tkeyPress = (e) => {\n    \t// some logic to assess stop/start of timer\n   \t\tif (this.state.milliSecondsElapsed === 0) {\n\t        this.handleStart();\n\t    } else if (this.state.timerInProgress === false) {\n\t        this.handleStart();\n\t    } else {\n\t        this.handleStop();\n\t    }\n\t};\n\n\t// <button onClick = {this.handleStart}>START</button>\n\t// <button onClick = {this.handleStop}>STOP</button>\n\t// <input value = {this.state.milliSecondsElapsed} onChange = {this.updateState} ref={this.textInput}/>\n\n\trender() {\n\t\treturn (\t\t\t\n\t\t\t<div className=\"index\">\n\t\t\t<input value={this.state.milliSecondsElapsed} onChange={this.updateState} />\n\t\t\t\t<button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>START</button>\n\t\t\t\t<button onClick={this.handleStop} ref={(ref) => (this.startBtn = ref)}>STOP</button>\n\n\t\t\t</div>\n\n\t\t);\n\t}\n\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}