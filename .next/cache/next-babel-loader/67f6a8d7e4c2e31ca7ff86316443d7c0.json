{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/website/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from '../components/MyLayout.js';\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textInput\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"keyPress\", e => {\n      if (e.keyCode === 32) {\n        // some logic to assess stop/start of timer\n        if (this.state.milliSecondsElapsed === 0) {\n          this.startBtn.click();\n        } else if (this.state.timerInProgress === false) {\n          this.startBtn.click();\n        } else {\n          this.stopBtn.click();\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleStart\", () => {\n      if (this.state.timerInProgress === true) return;\n      this.setState({\n        milliSecondsElapsed: 0\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        }, () => {\n          this.stopBtn.focus();\n        });\n      }, 10);\n    });\n\n    _defineProperty(this, \"handleStop\", () => {\n      this.setState({\n        total: this.state.total + this.state.milliSecondsElapsed\n      });\n\n      if (this.state.high < this.state.milliSecondsElapsed) {\n        this.setState({\n          high: this.state.milliSecondsElapsed\n        });\n      }\n\n      if (this.state.low > this.state.milliSecondsElapsed) {\n        // because i start with low = 0, it will never be less than that\n        this.setState({\n          low: this.state.milliSecondsElapsed\n        });\n      }\n\n      this.setState(previousState => ({\n        timerInProgress: false,\n        myArray: [...previousState.myArray, // <-- shallow copy existing data\n        this.state.milliSecondsElapsed / 100 // <-- add new time\n        ]\n      }), () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }); // its not adding the last one to the average\n\n      this.setState({\n        average: this.state.total / this.state.myArray.length\n      });\n    });\n\n    this.state = {\n      myArray: [],\n      // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0,\n      // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0,\n      // highest value\n      low: 1000000000,\n      // lowest value\n      timerInProgress: false // state to detect whether timer has started\n\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  updateState(e) {\n    this.setState({\n      milliSecondsElapsed: e.target.milliSecondsElapsed\n    });\n  }\n\n  // find the average AT EVERY GO \n  render() {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 6\n      }\n    }, __jsx(\"div\", {\n      className: \"index\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 8\n      }\n    }, __jsx(\"input\", {\n      value: this.state.milliSecondsElapsed / 100,\n      onChange: this.updateState,\n      ref: this.textInput,\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 10\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleStart,\n      ref: ref => this.startBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 10\n      }\n    }, \"START\"), __jsx(\"button\", {\n      onClick: this.handleStop,\n      ref: ref => this.stopBtn = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 10\n      }\n    }, \"STOP\"), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 10\n      }\n    }, this.state.milliSecondsElapsed / 100)), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, this.state.myArray.join(\"\\n \")), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, \"Average: \", this.state.average / 100), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, \"Slowest Time: \", this.state.high / 100), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, \"Fastest time: if \", this.state.low / 100));\n  }\n\n}","map":{"version":3,"sources":["/Users/Austin/website/pages/index.js"],"names":["React","Component","Layout","Timer","constructor","props","clearInterval","timer","e","keyCode","state","milliSecondsElapsed","startBtn","click","timerInProgress","stopBtn","setState","setInterval","focus","total","high","low","previousState","myArray","average","length","updateState","bind","textInput","createRef","componentDidMount","window","addEventListener","keyPress","componentWillUnmount","removeEventListener","target","render","handleStart","ref","handleStop","join"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Layout from '../components/MyLayout.js';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myArray: [], // <- add initial empty array\n      milliSecondsElapsed: 0,\n      total: 0, // this is my total, add the times each go through to the total and then divide by amount of times\n      average: 0,\n      high: 0, // highest value\n      low: 1000000000, // lowest value\n      timerInProgress: false // state to detect whether timer has started\n    };\n    this.updateState = this.updateState.bind(this);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", this.keyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  textInput = () => {\n    clearInterval(this.timer);\n  };\n  updateState(e) {\n    this.setState({ milliSecondsElapsed: e.target.milliSecondsElapsed });\n  }\n  \n\n  keyPress = (e) => {\n    if (e.keyCode === 32) {\n      // some logic to assess stop/start of timer\n      if (this.state.milliSecondsElapsed === 0) {\n        this.startBtn.click();\n      } else if (this.state.timerInProgress === false) {\n        this.startBtn.click();\n      } else {\n        this.stopBtn.click();\n      }\n    }\n  };\n\n  handleStart = () => {\n    if (this.state.timerInProgress === true) return;\n\n    this.setState({\n      milliSecondsElapsed: 0\n    });\n    this.timer = setInterval(() => {\n      this.setState(\n        {\n          milliSecondsElapsed: this.state.milliSecondsElapsed + 1,\n          timerInProgress: true\n        },\n        () => {\n          this.stopBtn.focus();\n        }\n      );\n    }, 10);\n  };\n  handleStop = () => {\n    this.setState({\n      total: this.state.total + this.state.milliSecondsElapsed \n    });\n    if (this.state.high < this.state.milliSecondsElapsed) {\n      this.setState({\n        high: this.state.milliSecondsElapsed\n      })\n    }\n    if (this.state.low > this.state.milliSecondsElapsed) { // because i start with low = 0, it will never be less than that\n      this.setState({ \n        low: this.state.milliSecondsElapsed\n      })\n    }\n    this.setState(\n      (previousState) => ({\n        timerInProgress: false,\n        myArray: [\n          ...previousState.myArray, // <-- shallow copy existing data\n          this.state.milliSecondsElapsed / 100 // <-- add new time\n        ]\n      }),\n      () => {\n        clearInterval(this.timer);\n        this.startBtn.focus();\n      }\n    );\n\n    // its not adding the last one to the average\n    this.setState({\n      average: this.state.total / this.state.myArray.length\n    });\n\n\n  };\n\n  // find the average AT EVERY GO \n\n  render() {\n    return (\n\t    <Layout>\n\t      <div className=\"index\" align='center'>\n\t        <input \n\t          value={this.state.milliSecondsElapsed/100}\n\t          onChange={this.updateState}\n\t          ref={this.textInput}\n\t          readOnly={true}\n\t        />\n\t        <button onClick={this.handleStart} ref={(ref) => (this.startBtn = ref)}>\n\t          START\n\t        </button>\n\t        <button onClick={this.handleStop} ref={(ref) => (this.stopBtn = ref)}>\n\t          STOP\n\t        </button>\n\t        <h1>{this.state.milliSecondsElapsed/100}</h1>\n\t      </div>\n        <div>{this.state.myArray.join(\"\\n \")}</div>\n        <h1>Average: {this.state.average/100}</h1>\n        <h1>Slowest Time: {this.state.high/100}</h1>\n        <h1>Fastest time: if {this.state.low/100}</h1>\n        \n      </Layout>\n\n\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}